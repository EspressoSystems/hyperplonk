var searchIndex = new Map(JSON.parse('[["arithmetic",{"t":"GFPPPFFNNNNNNNONHNNNNNNNNHHNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNHHOHHHNONNNNNNNNNNNNHHHHNHHNNNNNNNNNNNNOHNNNNONONONNNHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ArithErrors","DenseMultilinearExtension","InvalidParameters","SerializationErrors","ShouldNotArrive","VPAuxInfo","VirtualPolynomial","add","","","add_assign","","","add_mle_list","aux_info","batch_check","bit_decompose","borrow","","","","borrow_mut","","","","build_eq_x_r","build_eq_x_r_vec","build_f_hat","build_l","check","clone","","","clone_into","","","clone_to_uninit","","","default","","","deref","","","","deref_mut","","","","deserialize_with_mode","drop","","","","eq","","","eq_eval","equivalent","","","","evaluate","","evaluate_no_par","evaluate_opt","evaluations","fix_last_variables","fix_last_variables_no_par","fix_variables","","flattened_ml_extensions","fmt","","","","","from","","","","","from_evaluations_slice","from_evaluations_vec","gen_eval_point","get_batched_nv","get_index","get_uni_domain","hash","identity_permutation","identity_permutation_mles","index","init","","","","into","","","","is_zero","iter","iter_mut","max_degree","merge_polynomials","mul_by_mle","neg","new","new_from_mle","num_variables","num_vars","","print_evals","products","rand","","rand_zero","random_mle_list","random_permutation","random_permutation_mles","random_zero_mle_list","relabel","relabel_in_place","serialize_with_mode","","serialized_size","","sub","","sub_assign","","to_evaluations","to_owned","","","to_string","try_from","","","","try_into","","","","type_id","","","","vzip","","","","zero"],"q":[[0,"arithmetic"],[154,"arithmetic::virtual_polynomial"],[155,"ark_ff::fields::prime"],[156,"ark_poly::evaluations::multivariate::multilinear::dense"],[157,"ark_ff::fields"],[158,"arithmetic::errors"],[159,"core::result"],[160,"alloc::sync"],[161,"core::iter::traits::collect"],[162,"ark_serialize::error"],[163,"core::iter::traits::iterator"],[164,"core::marker"],[165,"alloc::vec"],[166,"ark_poly::domain::radix2"],[167,"ark_poly::polynomial::univariate::dense"],[168,"core::clone"],[169,"core::default"],[170,"ark_serialize"],[171,"std::io"],[172,"core::cmp"],[173,"core::option"],[174,"core::fmt"],[175,"core::hash"],[176,"core::slice::iter"],[177,"rand_core"],[178,"rand::rng"],[179,"alloc::string"],[180,"core::any"],[181,"arithmetic::util"],[182,"arithmetic::univariate_polynomial"],[183,"arithmetic::multilinear_polynomial"]],"i":"``Ab00``bh0000110`21Cb13201``2`12012012012013201320113201201`001121``1```12332013320111````1``1320132011110`212201122212````11010111111201332013201320132011","f":"```````{{{d{{b{c}}}}{d{{b{c}}}}}ef{}}{{{h{c}}{h{c}}}{{h{c}}}j}{{{d{{h{c}}}}{d{{h{c}}}}}{}j}{{{d{l{h{c}}}}{d{{h{c}}}}}nj}{{{d{l{h{c}}}}{h{c}}}nj}{{{d{l{h{c}}}}{A`{c{d{{h{c}}}}}}}nj}{{{d{l{b{c}}}}ec}{{Ad{nAb}}}f{{Aj{}{{Af{{Ah{{h{c}}}}}}}}}}`{e{{Ad{nAl}}}j{{An{}{{Af{{d{{h{c}}}}}}}}B`}}{{BbBd}{{Bh{Bf}}}}{d{{d{c}}}{}}000{{{d{l}}}{{d{lc}}}{}}000{{{d{{Bj{c}}}}}{{Ad{{Ah{{h{c}}}}Ab}}}f}{{{d{{Bj{c}}}}}{{Ad{{Bh{c}}Ab}}}f}{{{d{{b{c}}}}{d{{Bj{c}}}}}{{Ad{{b{c}}Ab}}}f}{{{d{{Bj{{Bh{c}}}}}}{d{{Bl{c}}}}Bf}{{Ad{{Bh{{Bn{c}}}}Ab}}}f}{{{d{{h{c}}}}}{{Ad{nAl}}}j}{{{d{{b{c}}}}}{{b{c}}}{C`f}}{{{d{{Cb{c}}}}}{{Cb{c}}}{C`f}}{{{d{{h{c}}}}}{{h{c}}}{C`j}}{{d{d{lc}}}n{}}00{dn}00{{}{{b{c}}}{Cdf}}{{}{{Cb{c}}}{Cdf}}{{}{{h{c}}}{Cdj}}{Bd{{d{c}}}{}}000{Bd{{d{lc}}}{}}000{{cCfCh}{{Ad{{h{e}}Al}}}Cjj}{Bdn}000{{{d{{b{c}}}}{d{{b{c}}}}}Bf{Clf}}{{{d{{Cb{c}}}}{d{{Cb{c}}}}}Bf{Clf}}{{{d{{h{c}}}}{d{{h{c}}}}}Bf{Clj}}{{{d{{Bj{c}}}}{d{{Bj{c}}}}}{{Ad{cAb}}}f}{{d{d{c}}}Bf{}}000{{{d{{b{c}}}}{d{{Bj{c}}}}}{{Ad{cAb}}}f}{{{d{{h{c}}}}{d{{Bj{c}}}}}{{Cn{c}}}j}{{{d{{h{c}}}}{d{{Bj{c}}}}}cj}0`{{{d{{h{c}}}}{d{{Bj{c}}}}}{{h{c}}}f}0{{{d{{h{c}}}}{d{{Bj{c}}}}}{{h{c}}}j}0`{{{d{Ab}}{d{lD`}}}Db}0{{{d{{b{c}}}}{d{lD`}}}Db{Ddf}}{{{d{{Cb{c}}}}{d{lD`}}}Db{Ddf}}{{{d{{h{c}}}}{d{lD`}}}{{Ad{nDf}}}j}{AlAb}{cc{}}000{{Bd{d{{Bj{c}}}}}{{h{c}}}j}{{Bd{Bh{c}}}{{h{c}}}j}{{BdBd{d{{Bj{c}}}}}{{Bh{c}}}f}{{BdBd}Bd}{{BdBd}{{A`{BdBdBf}}}}{Bd{{Ad{{Bl{c}}Ab}}}f}{{{d{{h{c}}}}{d{le}}}n{Dhj}Dj}{{BdBd}{{Bh{c}}}f}{{BdBd}{{Bh{{Ah{{h{c}}}}}}}f}{{{d{{h{c}}}}Bd}dj}{{}Bd}000{{}c{}}000{{{d{{h{c}}}}}Bfj}{{{d{{h{c}}}}}{{Dl{c}}}j}{{{d{l{h{c}}}}}{{Dn{c}}}j}`{{{d{{Bj{{Ah{{h{c}}}}}}}}}{{Ad{{Ah{{h{c}}}}Ab}}}f}{{{d{l{b{c}}}}{Ah{{h{c}}}}c}{{Ad{nAb}}}f}{{{h{c}}}{}j}{Bd{{b{c}}}f}{{{d{{Ah{{h{c}}}}}}c}{{b{c}}}f}`{{{d{{h{c}}}}}Bdj}`{{{d{{b{c}}}}}nf}`{{Bd{A`{BdBd}}Bd{d{lc}}}{{Ad{{A`{{b{e}}e}}Ab}}}E`f}{{Bd{d{lc}}}{{h{e}}}Ebj}{{Bd{A`{BdBd}}Bd{d{lc}}}{{Ad{{b{e}}Ab}}}E`f}{{BdBd{d{lc}}}{{A`{{Bh{{Ah{{h{e}}}}}}e}}}E`f}{{BdBd{d{lc}}}{{Bh{e}}}E`f}{{BdBd{d{lc}}}{{Bh{{Ah{{h{e}}}}}}}E`f}0{{{d{{h{c}}}}BdBdBd}{{h{c}}}j}{{{d{l{h{c}}}}BdBdBd}nj}{{{d{{Cb{c}}}}eCf}{{Ad{nAl}}}fEd}{{{d{{h{c}}}}eCf}{{Ad{nAl}}}jEd}{{{d{{Cb{c}}}}Cf}Bdf}{{{d{{h{c}}}}Cf}Bdj}{{{h{c}}{h{c}}}{{h{c}}}j}{{{d{{h{c}}}}{d{{h{c}}}}}{}j}{{{d{l{h{c}}}}{d{{h{c}}}}}nj}{{{d{l{h{c}}}}{h{c}}}nj}{{{d{{h{c}}}}}{{Bh{c}}}j}{dc{}}00{dEf}{c{{Ad{e}}}{}{}}000{{}{{Ad{c}}}{}}000{dEh}000{{}c{}}000{{}{{h{c}}}j}","D":"F`","p":[[5,"VirtualPolynomial",0,154],[1,"reference"],[10,"PrimeField",155],[5,"DenseMultilinearExtension",0,156],[10,"Field",157],[0,"mut"],[1,"unit"],[1,"tuple"],[6,"ArithErrors",0,158],[6,"Result",159],[17,"Item"],[5,"Arc",160],[10,"IntoIterator",161],[6,"SerializationError",162],[10,"Iterator",163],[10,"Send",164],[1,"u64"],[1,"usize"],[1,"bool"],[5,"Vec",165],[1,"slice"],[5,"Radix2EvaluationDomain",166],[5,"DensePolynomial",167],[10,"Clone",168],[5,"VPAuxInfo",0,154],[10,"Default",169],[6,"Compress",170],[6,"Validate",170],[10,"Read",171],[10,"PartialEq",172],[6,"Option",173],[5,"Formatter",174],[8,"Result",174],[10,"Debug",174],[5,"Error",174],[10,"Hash",175],[10,"Hasher",175],[5,"Iter",176],[5,"IterMut",176],[10,"RngCore",177],[10,"Rng",178],[10,"Write",171],[5,"String",179],[5,"TypeId",180]],"r":[[0,158],[1,156],[5,154],[6,154],[16,181],[25,154],[26,154],[28,182],[58,154],[65,183],[66,183],[68,183],[69,183],[70,183],[85,181],[86,181],[87,181],[88,182],[90,183],[91,183],[105,183],[118,183],[119,183],[120,183],[121,183]],"b":[[8,"impl-Add-for-DenseMultilinearExtension%3CF%3E"],[9,"impl-Add%3C%26DenseMultilinearExtension%3CF%3E%3E-for-%26DenseMultilinearExtension%3CF%3E"],[10,"impl-AddAssign%3C%26DenseMultilinearExtension%3CF%3E%3E-for-DenseMultilinearExtension%3CF%3E"],[11,"impl-AddAssign-for-DenseMultilinearExtension%3CF%3E"],[12,"impl-AddAssign%3C(F,+%26DenseMultilinearExtension%3CF%3E)%3E-for-DenseMultilinearExtension%3CF%3E"],[73,"impl-Display-for-ArithErrors"],[74,"impl-Debug-for-ArithErrors"],[128,"impl-Sub-for-DenseMultilinearExtension%3CF%3E"],[129,"impl-Sub%3C%26DenseMultilinearExtension%3CF%3E%3E-for-%26DenseMultilinearExtension%3CF%3E"],[130,"impl-SubAssign%3C%26DenseMultilinearExtension%3CF%3E%3E-for-DenseMultilinearExtension%3CF%3E"],[131,"impl-SubAssign-for-DenseMultilinearExtension%3CF%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGoAFAAAAAAACAAFABAAAAASAAcAHAAAAB4AHAA8AAMAQQACAEUAAwBKAAUAWAAAAFoAAQBeAAMAZgAAAGwAAABwAAAAdQAAAHgAAAB6AAEAfQAdAA=="}],["hyperplonk",{"t":"KRRRRQCMMMPFGEPPPPFPPFPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["HyperPlonkSNARK","Index","Proof","ProvingKey","VerifyingKey","build_mle","prelude","preprocess","prove","verify","ArithmeticErrors","CustomizedGates","HyperPlonkErrors","HyperPlonkSNARK","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MockCircuit","PCSErrors","PolyIOPErrors","SelectorColumn","SerializationError","TranscriptError","WitnessColumn","append","","borrow","","","","","borrow_mut","","","","","clone","","","clone_into","","","clone_to_uninit","","","coeff_ref","default","","","degree","deref","","","","","deref_mut","","","","","drop","","","","","eq","","equivalent","","","","fmt","","","","","from","","","","","","","","","","from_selector_rows","from_witness_rows","get_nv","","index","init","","","","","into","","","","","is_satisfied","jellyfish_turbo_plonk_gate","mock_gate","new","num_selector_columns","","num_variables","num_witness_columns","","public_inputs","super_long_selector_gate","to_owned","","","to_string","try_from","","","","","try_into","","","","","type_id","","","","","vanilla_plonk_gate","vzip","","","","","witnesses"],"q":[[0,"hyperplonk"],[10,"hyperplonk::prelude"],[139,"hyperplonk::errors"],[140,"core::result"],[141,"hyperplonk::witness"],[142,"hyperplonk::selectors"],[143,"ark_ff::fields::prime"],[144,"hyperplonk::custom_gate"],[145,"core::clone"],[146,"core::default"],[147,"core::cmp"],[148,"core::fmt"],[149,"arithmetic::errors"],[150,"transcript::errors"],[151,"subroutines::pcs::errors"],[152,"subroutines::poly_iop::errors"],[153,"ark_serialize::error"],[154,"alloc::vec"],[155,"hyperplonk::mock"],[156,"alloc::string"],[157,"core::any"]],"i":"`Cj000``000f```0000`00`00`AblCdAh43210432032032032203201043210432104320300330443210444444323232110432104321001101101003241043210432104320104321","f":"```````{{{b{c}}b}{{h{{d{eg}}f}}}{}{}{}}{{{b{c}}{b{j}}{b{{j{l}}}}}{{h{ef}}}{}{}}{{{b{c}}{b{j}}{b{e}}}{{h{nf}}}{}{}}```````````````{{{b{A`{Ab{c}}}}c}AdAf}{{{b{A`{l{c}}}}c}AdAf}{b{{b{c}}}{}}0000{{{b{A`}}}{{b{A`c}}}{}}0000{{{b{Ah}}}Ah}{{{b{{Ab{c}}}}}{{Ab{c}}}{AjAf}}{{{b{{l{c}}}}}{{l{c}}}{AjAf}}{{b{b{A`c}}}Ad{}}00{bAd}00{{{b{{l{c}}}}}{{b{{j{c}}}}}Af}{{}Ah}{{}{{Ab{c}}}{AlAf}}{{}{{l{c}}}{AlAf}}{{{b{Ah}}}An}{An{{b{c}}}{}}0000{An{{b{A`c}}}{}}0000{AnAd}0000{{{b{Ah}}{b{Ah}}}n}{{{b{{Ab{c}}}}{b{{Ab{c}}}}}n{B`Af}}{{b{b{c}}}n{}}000{{{b{Ah}}{b{A`Bb}}}Bd}{{{b{f}}{b{A`Bb}}}Bd}0{{{b{{Ab{c}}}}{b{A`Bb}}}Bd{BfAf}}{{{b{{l{c}}}}{b{A`Bb}}}Bd{BfAf}}{cc{}}0{Bhf}{Bjf}{Blf}{Bnf}{C`f}555{{{b{{j{{`{c}}}}}}}{{h{{Cb{{Ab{c}}}}f}}}Af}{{{b{{j{{`{c}}}}}}}{{h{{Cb{{l{c}}}}f}}}Af}{{{b{{Ab{c}}}}}AnAf}{{{b{{l{c}}}}}AnAf}`{{}An}0000{{}c{}}0000{{{b{{Cd{c}}}}}nAf}{{}Ah}{{AnAn}Ah}{{An{b{Ah}}}{{Cd{c}}}Af}{{{b{{Cd{c}}}}}AnAf}{{{b{Ah}}}An}110`4{bc{}}00{bCf}{c{{h{e}}}{}{}}0000{{}{{h{c}}}{}}0000{bCh}00009;;;;;`","D":"El","p":[[1,"reference"],[1,"tuple"],[6,"HyperPlonkErrors",10,139],[6,"Result",140],[1,"slice"],[5,"WitnessColumn",10,141],[1,"bool"],[0,"mut"],[5,"SelectorColumn",10,142],[1,"unit"],[10,"PrimeField",143],[5,"CustomizedGates",10,144],[10,"Clone",145],[10,"Default",146],[1,"usize"],[10,"PartialEq",147],[5,"Formatter",148],[8,"Result",148],[10,"Debug",148],[6,"ArithErrors",149],[6,"TranscriptError",150],[6,"PCSError",151],[6,"PolyIOPErrors",152],[6,"SerializationError",153],[5,"Vec",154],[5,"MockCircuit",10,155],[5,"String",156],[5,"TypeId",157],[10,"HyperPlonkSNARK",0]],"r":[[11,144],[12,139],[13,0],[18,155],[21,142],[24,141]],"b":[[73,"impl-Display-for-HyperPlonkErrors"],[74,"impl-Debug-for-HyperPlonkErrors"],[79,"impl-From%3CArithErrors%3E-for-HyperPlonkErrors"],[80,"impl-From%3CTranscriptError%3E-for-HyperPlonkErrors"],[81,"impl-From%3CPCSError%3E-for-HyperPlonkErrors"],[82,"impl-From%3CPolyIOPErrors%3E-for-HyperPlonkErrors"],[83,"impl-From%3CSerializationError%3E-for-HyperPlonkErrors"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAF0ADAACAAMABwAAAA4AAAATAAAAHAAWADQAGQBQAAQAXAAFAGcAAABwAAAAcgASAIYABQA="}],["subroutines",{"t":"CCQRRRRRKRRRRKRRNMMMMMNMCMMMPFFPPPPFFFFFGEPEPIFFFFFNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNPFPPPPPRPKRREGKRRPPKRRRPRRKRRNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMMMMNNOOMMMMQNNNNNNNNMMMMNN","n":["pcs","poly_iop","to_bytes","BatchProof","Commitment","Evaluation","Point","Polynomial","PolynomialCommitmentScheme","Proof","ProverParam","","SRS","StructuredReferenceString","VerifierParam","","batch_verify","commit","extract_prover_param","extract_verifier_param","gen_srs_for_testing","","multi_open","open","prelude","trim","","verify","ArithErrors","BatchProof","Commitment","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearKzgPCS","MultilinearKzgProof","MultilinearProverParam","MultilinearUniversalParams","MultilinearVerifierParam","PCSError","PolynomialCommitmentScheme","SerializationError","StructuredReferenceString","TranscriptError","UnivariateKzgBatchProof","UnivariateKzgPCS","UnivariateKzgProof","UnivariateProverParam","UnivariateUniversalParams","UnivariateVerifierParam","batch_check","","","","","","","","","batch_verify","beta_h","","borrow","","","","","","","","","","","","","borrow_mut","","","","","","","","","","","","","check","","","","","","","","","clone","","","","","","","","","","clone_into","","","","","","","","","","clone_to_uninit","","","","","","","","","","commit","","default","","","","","deref","","","","","","","","","","","","","deref_mut","","","","","","","","","","","","","deserialize_with_mode","","","","","","","","","drop","","","","","","","","","","","","","eq","","","","","","","equivalent","","","","","","","","","","","","","","extract_prover_param","","extract_verifier_param","","f_i_eval_at_point_i","fmt","","","","","","","","","","","","from","","","","","","","","","","","","","","","","g","","","gen_srs_for_testing","","","","h","","","","h_mask","","hash","init","","","","","","","","","","","","","into","","","","","","","","","","","","","max_degree","multi_open","num_vars","","open","","powers_of_g","","","proof","proofs","prover_param","serialize_with_mode","","","","","","","","","serialized_size","","","","","","","","","to_owned","","","","","","","","","","to_string","trim","","","","try_from","","","","","","","","","","","","","try_into","","","","","","","","","","","","","type_id","","","","","","","","","","","","","verify","","vzip","","","","","","","","","","","","","PolyIOP","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","deref","deref_mut","drop","eq","equivalent","","extract_sum","fmt","from","init","init_transcript","","","","into","prelude","prove","","","","to_owned","try_from","try_into","type_id","verify","","","","vzip","ArithmeticErrors","IOPProof","InvalidChallenge","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearExtension","PCSErrors","PermutationCheck","PermutationCheckSubClaim","PermutationProof","PolyIOP","PolyIOPErrors","ProductCheck","ProductCheckProof","ProductCheckSubClaim","SerializationErrors","ShouldNotArrive","SumCheck","SumCheckProof","SumCheckSubClaim","Transcript","TranscriptErrors","VPAuxInfo","VirtualPolynomial","ZeroCheck","ZeroCheckProof","ZeroCheckSubClaim","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","default","deref","","deref_mut","","drop","","eq","equivalent","","extract_sum","fmt","","","from","","","","","","init","","init_transcript","","","","into","","point","proofs","prove","","","","to_bytes","to_owned","to_string","try_from","","try_into","","type_id","","verify","","","","vzip",""],"q":[[0,"subroutines"],[3,"subroutines::pcs"],[28,"subroutines::pcs::prelude"],[376,"subroutines::poly_iop"],[412,"subroutines::poly_iop::prelude"],[497,"transcript"],[498,"subroutines::pcs::errors"],[499,"core::result"],[500,"core::borrow"],[501,"rand::rng"],[502,"core::option"],[503,"ark_serialize::error"],[504,"ark_ec::pairing"],[505,"subroutines::pcs::multilinear_kzg::srs"],[506,"core::iter::traits::iterator"],[507,"core::marker"],[508,"subroutines::pcs::multilinear_kzg"],[509,"subroutines::pcs::structs"],[510,"subroutines::pcs::univariate_kzg::srs"],[511,"ark_ec"],[512,"subroutines::pcs::univariate_kzg"],[513,"subroutines::pcs::multilinear_kzg::batching"],[514,"core::clone"],[515,"core::default"],[516,"ark_serialize"],[517,"std::io"],[518,"core::cmp"],[519,"core::fmt"],[520,"arithmetic::errors"],[521,"transcript::errors"],[522,"core::hash"],[523,"alloc::string"],[524,"core::any"],[525,"ark_ff::fields::prime"],[526,"subroutines::poly_iop::errors"],[527,"arithmetic::virtual_polynomial"],[528,"subroutines::poly_iop::structs"],[529,"subroutines::poly_iop::perm_check"],[530,"subroutines::poly_iop::prod_check"],[531,"subroutines::poly_iop::sum_check"],[532,"subroutines::poly_iop::zero_check"]],"i":"```Dd0000`00Af1`1011001011`101l``0000```````0`0``````BhBnC`CbCdCfCjClCnEl420Fn;D`;:987654321<0;:9876543;:98765430;:98765430;:98765430;:9876543210765421<0;:987654321<0;:9876543;:987654321<0;:9876543087654300887766554433;6;60<<0;:987654321<<<<0;:9876543:9421;6:964;9721<0;:987654321<0;:987654362:921:6538;;:9876543;:98765430;:9876543<21;621<0;:987654321<0;:987654321<0;:98765432121<0;:9876543`Fd00000000000000000000`0000000000000Fh`00000G`1`Gb0```Gd033`222322`Gf04Fl500000505050000455055555050324150003241`05505050324150","f":"````````````````{{{b{c}}{b{{d{e}}}}{b{{d{g}}}}{b{i}}{b{fh}}}{{n{jl}}}{}{}{}{}}{{e{b{g}}}{{n{il}}}{}{{A`{c}}}{}{}}{{{b{{Af{}{{Ab{c}}{Ad{e}}}}}}Ah}c{}{}}{{{b{{Af{}{{Ab{c}}{Ad{e}}}}}}Ah}e{}{}}{{{b{fc}}Ah}{{n{el}}}Aj{}}{{{b{fc}}Ah}{{n{{Af{}{{Ab{e}}{Ad{g}}}}l}}}Aj{}{}}{{e{b{{d{g}}}}{b{{d{i}}}}{b{{d{k}}}}{b{fh}}}{{n{ml}}}{}{{A`{c}}}{}{}{}{}}{{e{b{g}}{b{i}}}{{n{{Al{km}}l}}}{}{{A`{c}}}{}{}{}{}}`{{e{An{Ah}}{An{Ah}}}{{n{{Al{gi}}l}}}{}{{A`{c}}}{}{}}{{{b{{Af{}{{Ab{c}}{Ad{e}}}}}}Ah}{{n{{Al{ce}}l}}}{}{}}{{{b{c}}{b{e}}{b{g}}b{b{i}}}{{n{jl}}}{}{}{}{}}```````````````````````{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{Bh{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{Bn{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{C`{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{Cb{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{Cd{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{Cf{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Ch{{Bj{}{{Bf{{b{{Cj{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{Cl{c}}}}}}}}Bl}}{e{{n{B`Bb}}}Bd{{Bj{}{{Bf{{b{{Cn{c}}}}}}}}Bl}}{{{b{c}}{b{{d{e}}}}{b{{d{g}}}}{b{i}}{b{fh}}}{{n{jl}}}{}{}{}{}}``{b{{b{c}}}{}}000000000000{{{b{f}}}{{b{fc}}}{}}000000000000{{{b{{Bh{c}}}}}{{n{B`Bb}}}Bd}{{{b{{Bn{c}}}}}{{n{B`Bb}}}Bd}{{{b{{C`{c}}}}}{{n{B`Bb}}}Bd}{{{b{{Cb{c}}}}}{{n{B`Bb}}}Bd}{{{b{{Cd{c}}}}}{{n{B`Bb}}}Bd}{{{b{{Cf{c}}}}}{{n{B`Bb}}}Bd}{{{b{{Cj{c}}}}}{{n{B`Bb}}}Ch}{{{b{{Cl{c}}}}}{{n{B`Bb}}}Bd}{{{b{{Cn{c}}}}}{{n{B`Bb}}}Bd}{{{b{{D`{ce}}}}}{{D`{ce}}}{BdDb}{{Dd{c}}Db}}{{{b{{Bh{c}}}}}{{Bh{c}}}{DbBd}}{{{b{{Bn{c}}}}}{{Bn{c}}}{DbBd}}{{{b{{C`{c}}}}}{{C`{c}}}{DbBd}}{{{b{{Cb{c}}}}}{{Cb{c}}}{DbBd}}{{{b{{Cd{c}}}}}{{Cd{c}}}Bd}{{{b{{Cf{c}}}}}{{Cf{c}}}{DbBd}}{{{b{{Cj{c}}}}}{{Cj{c}}}{DbCh}}{{{b{{Cl{c}}}}}{{Cl{c}}}Bd}{{{b{{Cn{c}}}}}{{Cn{c}}}{DbBd}}{{b{b{fc}}}B`{}}000000000{bB`}000000000{{e{b{g}}}{{n{il}}}{}{{A`{c}}}{}{}}0{{}{{D`{ce}}}{BdDf}{{Dd{c}}Df}}{{}{{Cd{c}}}Bd}{{}{{Cf{c}}}{DfBd}}{{}{{Cj{c}}}{DfCh}}{{}{{Cl{c}}}Bd}{Ah{{b{c}}}{}}000000000000{Ah{{b{fc}}}{}}000000000000{{cDhDj}{{n{{Bh{e}}Bb}}}DlBd}{{cDhDj}{{n{{Bn{e}}Bb}}}DlBd}{{cDhDj}{{n{{C`{e}}Bb}}}DlBd}{{cDhDj}{{n{{Cb{e}}Bb}}}DlBd}{{cDhDj}{{n{{Cd{e}}Bb}}}DlBd}{{cDhDj}{{n{{Cf{e}}Bb}}}DlBd}{{cDhDj}{{n{{Cj{e}}Bb}}}DlCh}{{cDhDj}{{n{{Cl{e}}Bb}}}DlBd}{{cDhDj}{{n{{Cn{e}}Bb}}}DlBd}{AhB`}000000000000{{{b{{D`{ce}}}}{b{{D`{ce}}}}}j{BdDn}{{Dd{c}}Dn}}{{{b{{Cb{c}}}}{b{{Cb{c}}}}}j{DnBd}}{{{b{{Cd{c}}}}{b{{Cd{c}}}}}jBd}{{{b{{Cf{c}}}}{b{{Cf{c}}}}}j{DnBd}}{{{b{{Cj{c}}}}{b{{Cj{c}}}}}j{DnCh}}{{{b{{Cl{c}}}}{b{{Cl{c}}}}}jBd}{{{b{{Cn{c}}}}{b{{Cn{c}}}}}j{DnBd}}{{b{b{c}}}j{}}0000000000000{{{b{{Bh{c}}}}Ah}eBd{}}{{{b{{Cf{c}}}}Ah}eBd{}}10`{{{b{l}}{b{fE`}}}Eb}0{{{b{{D`{ce}}}}{b{fE`}}}Eb{BdEd}{{Dd{c}}Ed}}{{{b{{Bh{c}}}}{b{fE`}}}Eb{EdBd}}{{{b{{Bn{c}}}}{b{fE`}}}Eb{EdBd}}{{{b{{C`{c}}}}{b{fE`}}}Eb{EdBd}}{{{b{{Cb{c}}}}{b{fE`}}}Eb{EdBd}}{{{b{{Cd{c}}}}{b{fE`}}}EbBd}{{{b{{Cf{c}}}}{b{fE`}}}Eb{EdBd}}{{{b{{Cj{c}}}}{b{fE`}}}Eb{EdCh}}{{{b{{Cl{c}}}}{b{fE`}}}EbBd}{{{b{{Cn{c}}}}{b{fE`}}}Eb{EdBd}}{cc{}}0{Efl}{Ehl}{Bbl}33333333333```{{{b{fc}}Ah}{{n{el}}}Aj{}}0{{{b{fc}}Ah}{{n{{Bh{e}}l}}}AjBd}{{{b{fc}}Ah}{{n{{Cf{e}}l}}}AjBd}``````{{{b{{Cd{c}}}}{b{fe}}}B`BdEj}{{}Ah}000000000000{{}c{}}000000000000{{{b{{Cf{c}}}}}AhBd}{{e{b{{d{g}}}}{b{{d{i}}}}{b{{d{k}}}}{b{fh}}}{{n{{D`{m{El{m}}}}l}}}{}{{A`{c}}}{}{}{}Bd}``{{e{b{g}}{b{i}}}{{n{{Al{km}}l}}}{}{{A`{c}}}{}{}{}{}}0``````{{{b{{Bh{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{Bn{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{C`{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{Cb{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{Cd{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{Cf{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{Cj{c}}}}eDh}{{n{B`Bb}}}ChEn}{{{b{{Cl{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{Cn{c}}}}eDh}{{n{B`Bb}}}BdEn}{{{b{{Bh{c}}}}Dh}AhBd}{{{b{{Bn{c}}}}Dh}AhBd}{{{b{{C`{c}}}}Dh}AhBd}{{{b{{Cb{c}}}}Dh}AhBd}{{{b{{Cd{c}}}}Dh}AhBd}{{{b{{Cf{c}}}}Dh}AhBd}{{{b{{Cj{c}}}}Dh}AhCh}{{{b{{Cl{c}}}}Dh}AhBd}{{{b{{Cn{c}}}}Dh}AhBd}{bc{}}000000000{bF`}{{e{An{Ah}}{An{Ah}}}{{n{{Al{gi}}l}}}{}{{A`{c}}}{}{}}0{{{b{{Bh{c}}}}Ah}{{n{{Al{eg}}l}}}Bd{}{}}{{{b{{Cf{c}}}}Ah}{{n{{Al{eg}}l}}}Bd{}{}}{c{{n{e}}}{}{}}000000000000{{}{{n{c}}}{}}000000000000{bFb}000000000000{{{b{c}}{b{e}}{b{g}}b{b{i}}}{{n{jl}}}{}{}{}{}}0{{}c{}}000000000000`{b{{b{c}}}{}}{{{b{f}}}{{b{fc}}}{}}{{{b{{Fd{c}}}}}{{Fd{c}}}{DbFf}}{{b{b{fc}}}B`{}}{bB`}{{}{{Fd{c}}}{DfFf}}{Ah{{b{c}}}{}}{Ah{{b{fc}}}{}}{AhB`}{{{b{{Fd{c}}}}{b{{Fd{c}}}}}j{DnFf}}{{b{b{c}}}j{}}0{{{b{c}}}e{}Ff}{{{b{{Fd{c}}}}{b{fE`}}}Eb{EdFf}}{cc{}}{{}Ah}?????`{{{b{c}}{b{fe}}}{{n{gFh}}}{}{}{}}{{b{b{{d{c}}}}{b{{d{c}}}}{b{fh}}}{{n{{Al{ecc}}Fh}}}{}{}}{{b{b{{d{c}}}}{b{{d{c}}}}{b{{d{c}}}}{b{fh}}}{{n{{Al{ecc}}Fh}}}{}{}}2{bc{}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{bFb}{{{b{c}}{b{Fj}}{b{fe}}}{{n{gFh}}}{}{}{}}{{{b{c}}{b{e}}{b{fg}}}{{n{iFh}}}{}{}{}{}}0{{c{b{e}}{b{g}}{b{fi}}}{{n{kFh}}}Ff{}{}{}{}}{{}c{}}`````````````````````````````{b{{b{c}}}{}}0{{{b{f}}}{{b{fc}}}{}}0{{{b{{Fl{c}}}}}{{Fl{c}}}{DbFf}}{{b{b{fc}}}B`{}}{bB`}{{}{{Fl{c}}}{DfFf}}{Ah{{b{c}}}{}}0{Ah{{b{fc}}}{}}0{AhB`}0{{{b{{Fl{c}}}}{b{{Fl{c}}}}}j{DnFf}}{{b{b{c}}}j{}}0{{{b{c}}}e{}Ff}{{{b{Fh}}{b{fE`}}}Eb}0{{{b{{Fl{c}}}}{b{fE`}}}Eb{EdFf}}{cc{}}{lFh}{EfFh}{EhFh}{BbFh}4{{}Ah}0{{}c{}}00000``{{b{b{{d{c}}}}{b{{d{c}}}}{b{{d{c}}}}{b{fh}}}{{n{{Al{ecc}}Fh}}}{}{}}{{b{b{{d{c}}}}{b{{d{c}}}}{b{fh}}}{{n{{Al{ecc}}Fh}}}{}{}}{{{b{c}}{b{fe}}}{{n{gFh}}}{}{}{}}0`{bc{}}{bF`}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{bFb}0{{{b{c}}{b{e}}{b{fg}}}{{n{iFh}}}{}{}{}{}}{{{b{c}}{b{Fj}}{b{fe}}}{{n{gFh}}}{}{}{}}{{c{b{e}}{b{g}}{b{fi}}}{{n{kFh}}}Ff{}{}{}{}}2;;","D":"ABl","p":[[1,"reference"],[1,"slice"],[0,"mut"],[5,"IOPTranscript",497],[1,"bool"],[6,"PCSError",28,498],[6,"Result",499],[10,"Borrow",500],[17,"ProverParam"],[17,"VerifierParam"],[10,"StructuredReferenceString",3],[1,"usize"],[10,"Rng",501],[1,"tuple"],[6,"Option",502],[1,"unit"],[6,"SerializationError",503],[10,"Pairing",504],[17,"Item"],[5,"MultilinearUniversalParams",28,505],[10,"Iterator",506],[10,"Send",507],[5,"MultilinearProverParam",28,505],[5,"MultilinearVerifierParam",28,505],[5,"MultilinearKzgProof",28,508],[5,"Commitment",28,509],[5,"UnivariateUniversalParams",28,510],[10,"AffineRepr",511],[5,"UnivariateProverParam",28,510],[5,"UnivariateVerifierParam",28,510],[5,"UnivariateKzgProof",28,512],[5,"BatchProof",28,513],[10,"Clone",514],[10,"PolynomialCommitmentScheme",3],[10,"Default",515],[6,"Compress",516],[6,"Validate",516],[10,"Read",517],[10,"PartialEq",518],[5,"Formatter",519],[8,"Result",519],[10,"Debug",519],[6,"ArithErrors",520],[6,"TranscriptError",521],[10,"Hasher",522],[5,"MultilinearKzgPCS",28,508],[10,"Write",517],[5,"String",523],[5,"TypeId",524],[5,"PolyIOP",376],[10,"PrimeField",525],[6,"PolyIOPErrors",412,526],[5,"VPAuxInfo",527],[5,"IOPProof",412,528],[5,"UnivariateKzgPCS",28],[10,"SumCheck",412],[10,"PermutationCheck",412],[10,"ProductCheck",412],[10,"ZeroCheck",412]],"r":[[29,513],[30,509],[35,508],[36,508],[37,505],[38,505],[39,505],[40,498],[41,3],[43,3],[45,512],[46,512],[47,512],[48,510],[49,510],[50,510],[413,528],[421,529],[424,376],[425,526],[426,530],[431,531],[438,532],[482,0]],"b":[[209,"impl-Display-for-PCSError"],[210,"impl-Debug-for-PCSError"],[223,"impl-From%3CArithErrors%3E-for-PCSError"],[224,"impl-From%3CTranscriptError%3E-for-PCSError"],[225,"impl-From%3CSerializationError%3E-for-PCSError"],[393,"impl-SumCheck%3CF%3E-for-PolyIOP%3CF%3E"],[394,"impl-ProductCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[395,"impl-ZeroCheck%3CF%3E-for-PolyIOP%3CF%3E"],[396,"impl-PermutationCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[399,"impl-SumCheck%3CF%3E-for-PolyIOP%3CF%3E"],[400,"impl-ProductCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[401,"impl-PermutationCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[402,"impl-ZeroCheck%3CF%3E-for-PolyIOP%3CF%3E"],[407,"impl-ProductCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[408,"impl-ZeroCheck%3CF%3E-for-PolyIOP%3CF%3E"],[409,"impl-PermutationCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[410,"impl-SumCheck%3CF%3E-for-PolyIOP%3CF%3E"],[459,"impl-Display-for-PolyIOPErrors"],[460,"impl-Debug-for-PolyIOPErrors"],[463,"impl-From%3CPCSError%3E-for-PolyIOPErrors"],[464,"impl-From%3CArithErrors%3E-for-PolyIOPErrors"],[465,"impl-From%3CTranscriptError%3E-for-PolyIOPErrors"],[466,"impl-From%3CSerializationError%3E-for-PolyIOPErrors"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFsBHAAAAAIAHgAAACoAAAAsAAAANAAIAEAAQACDAEkA0gALAOAAAgD7AA0AIgEcAEMBJgBsAQwAegENAIkBBACPAQ0ApAEAAKcBAgCsAQEAsQECALUBAQC4ARIAzAECANABAwDVAQEA3QEBAOQBBwDwAQEA"}],["transcript",{"t":"FPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNN","n":["IOPTranscript","InvalidTranscript","SerializationError","TranscriptError","append_field_element","append_message","append_serializable_element","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","deref","","deref_mut","","drop","","fmt","","from","","","get_and_append_challenge","get_and_append_challenge_vectors","init","","into","","new","to_bytes","to_owned","to_string","try_from","","try_into","","type_id","","vzip",""],"q":[[0,"transcript"],[43,"transcript::errors"],[44,"core::result"],[45,"ark_ff::fields::prime"],[46,"ark_serialize"],[47,"core::clone"],[48,"core::fmt"],[49,"ark_serialize::error"],[50,"alloc::vec"],[51,"alloc::string"],[52,"core::any"]],"i":"`n0`d001010000101010111100010100`0110101010","f":"````{{{f{b{d{c}}}}{f{{j{h}}}}{f{c}}}{{A`{ln}}}Ab}{{{f{b{d{c}}}}{f{{j{h}}}}{f{{j{h}}}}}{{A`{ln}}}Ab}{{{f{b{d{c}}}}{f{{j{h}}}}{f{e}}}{{A`{ln}}}AbAd}{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{{f{{d{c}}}}}{{d{c}}}{AfAb}}{{f{f{bc}}}l{}}{fl}{Ah{{f{c}}}{}}0{Ah{{f{bc}}}{}}0{Ahl}0{{{f{n}}{f{bAj}}}Al}0{cc{}}{Ann}1{{{f{b{d{c}}}}{f{{j{h}}}}}{{A`{cn}}}Ab}{{{f{b{d{c}}}}{f{{j{h}}}}Ah}{{A`{{B`{c}}n}}}Ab}{{}Ah}0{{}c{}}0{{{f{{j{h}}}}}{{d{c}}}Ab}`{fc{}}{fBb}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{fBd}066","D":"Af","p":[[0,"mut"],[5,"IOPTranscript",0],[1,"reference"],[1,"u8"],[1,"slice"],[1,"unit"],[6,"TranscriptError",0,43],[6,"Result",44],[10,"PrimeField",45],[10,"CanonicalSerialize",46],[10,"Clone",47],[1,"usize"],[5,"Formatter",48],[8,"Result",48],[6,"SerializationError",49],[5,"Vec",50],[5,"String",51],[5,"TypeId",52]],"r":[[3,43]],"b":[[20,"impl-Display-for-TranscriptError"],[21,"impl-Debug-for-TranscriptError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACAABAAFABEAGAAAABoAAwAiAAkA"}],["util",{"t":"H","n":["parallelizable_slice_iter"],"q":[[0,"util"],[1,"rayon::slice"],[2,"core::marker"]],"i":"`","f":"{{{d{{b{c}}}}}{{f{c}}}h}","D":"d","p":[[1,"slice"],[1,"reference"],[5,"Iter",1],[10,"Sync",2]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[6965,4039,13996,1774,268]}