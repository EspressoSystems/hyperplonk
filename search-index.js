var searchIndex = JSON.parse('{\
"arithmetic":{"doc":"","t":[4,3,13,13,13,3,3,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,5,12,5,5,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,12,11,12,11,12,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArithErrors","DenseMultilinearExtension","InvalidParameters","SerializationErrors","ShouldNotArrive","VPAuxInfo","VirtualPolynomial","add","add","add","add_assign","add_assign","add_assign","add_mle_list","aux_info","bit_decompose","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_eq_x_r","build_eq_x_r_vec","build_f_hat","build_l","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize_unchecked","deserialize_uncompressed","drop","drop","drop","drop","eq","eq","eq","eq_eval","evaluate","evaluate","evaluate_no_par","evaluate_opt","evaluations","fix_last_variables","fix_last_variables_no_par","fix_variables","fix_variables","flattened_ml_extensions","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_evaluations_slice","from_evaluations_vec","gen_eval_point","get_batched_nv","get_hash","get_index","get_uni_domain","hash","identity_permutation","identity_permutation_mles","index","init","init","init","init","into","into","into","into","is_zero","iter","iter_mut","max_degree","merge_polynomials","mul_by_mle","neg","new","new_from_mle","num_variables","num_vars","num_vars","print_evals","products","rand","rand","rand_zero","random_mle_list","random_permutation","random_permutation_mles","random_zero_mle_list","relabel","relabel_inplace","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","sub","sub","sub_assign","sub_assign","to_evaluations","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uncompressed_size","uncompressed_size","vzip","vzip","vzip","vzip","zero"],"q":["arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>enum</code> specifying the possible failure modes of the …","Stores a multilinear polynomial in dense evaluation form.","Invalid parameters: {0}","An error during (de)serialization: {0}","Should not arrive to this point","Auxiliary information about the multilinear polynomial","A virtual polynomial is a sum of products of multilinear …","","","","","","","Add a product of list of multilinear extensions to self …","Aux information about the multilinear polynomial","Decompose an integer into a binary vector in little endian.","","","","","","","","","This function build the eq(x, r) polynomial for any given …","This function build the eq(x, r) polynomial for any given …","","Given a list of points, build <code>l(points)</code> which is a list of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate eq polynomial.","Evaluate the virtual polynomial at point <code>point</code>. Returns an …","","","","The evaluation over {0,1}^<code>num_vars</code>","","","","","Stores multilinear extensions in which product …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new polynomial from a list of evaluations …","Construct a new polynomial from a list of evaluations …","given the evaluation input <code>point</code> of the <code>index</code>-th …","Return the number of variables that one need for an MLE to …","","","get the domain for the univariate polynomial","","","A list of MLEs that represents an identity permutation","Returns the evaluation of the polynomial at a point …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns an iterator that iterates over the evaluations …","Returns a mutable iterator that iterates over the …","max number of multiplicands in each product","merge a set of polynomials. Returns an error if the …","Multiple the current VirtualPolynomial by an MLE:","","Creates an empty virtual polynomial with <code>num_variables</code>.","Creates an new virtual polynomial from a MLE and its …","number of variables of the polynomial","","Number of variables","Print out the evaluation map for testing. Panic if the …","list of reference to products (as usize) of multilinear …","Sample a random virtual polynomial, return the polynomial …","","Sample a random virtual polynomial that evaluates to zero …","Sample a random list of multilinear polynomials. Returns","","A list of MLEs that represent a random permutation","","","Relabel the point inplace by switching <code>k</code> scalars from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,5,5,5,0,0,1,2,2,2,2,2,1,1,0,5,1,15,2,5,1,15,2,0,0,1,0,1,15,2,1,15,2,1,15,2,5,1,15,2,5,1,15,2,2,2,2,5,1,15,2,1,15,2,0,1,2,0,0,2,0,0,0,2,1,5,5,1,15,2,5,5,1,15,2,2,2,0,0,2,0,0,2,0,0,2,5,1,15,2,5,1,15,2,2,2,2,15,0,1,2,1,1,15,2,2,1,1,1,2,1,0,0,0,0,2,2,15,2,15,2,15,2,15,2,2,2,2,2,2,1,15,2,5,5,1,15,2,5,1,15,2,5,1,15,2,15,2,5,1,15,2,2],"f":[0,0,0,0,0,0,0,[[1,1]],[[2,2]],[[2,2],2],[[2,2]],[2],[[2,2]],[[[1,[3]],4,3],[[6,[5]]]],0,[[7,8],[[10,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[[11,[[2,[3]]]],5]]]],[[],[[6,[[10,[3]],5]]]],[[[1,[3]]],[[6,[[1,[3]],5]]]],[[12,9],[[6,[[10,[[13,[3]]]],5]]]],[[[1,[[0,[14,3]]]]],[[1,[[0,[14,3]]]]]],[[[15,[[0,[14,3]]]]],[[15,[[0,[14,3]]]]]],[2,2],[[]],[[]],[[]],[[],[[1,[[0,[16,3]]]]]],[[],[[15,[[0,[16,3]]]]]],[[],2],[8],[8],[8],[8],[8],[8],[8],[8],[[],[[6,[2,17]]]],[[],[[6,[2,17]]]],[[],[[6,[2,17]]]],[8],[8],[8],[8],[[[1,[[0,[18,3]]]],1],9],[[[15,[[0,[18,3]]]],15],9],[[2,2],9],[[],[[6,[3,5]]]],[[[1,[3]]],[[6,[3,5]]]],[2,19],[2,20],[2,20],0,[2,[[2,[3]]]],[2,[[2,[3]]]],[2,[[2,[20]]]],[2,2],0,[[5,21],22],[[5,21],22],[[[1,[[0,[23,3]]]],21],22],[[[15,[[0,[23,3]]]],21],22],[[2,21],[[6,[24]]]],[17,5],[[]],[[]],[[]],[[]],[8,2],[[8,[10,[25]]],2],[[8,8],[[10,[3]]]],[[8,8],8],[[],7],[[8,8]],[8,[[6,[[12,[3]],5]]]],[2],[[8,8],[[10,[3]]]],[[8,8],[[10,[[11,[[2,[3]]]]]]]],[[2,8]],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[2,9],[2,26],[2,27],0,[[],[[6,[[11,[[2,[3]]]],5]]]],[[[1,[3]],[11,[[2,[3]]]],3],[[6,[5]]]],[2],[8,[[1,[3]]]],[[11,3],[[1,[3]]]],0,[2,8],0,[[[1,[3]]]],0,[[8,8],[[6,[5]]]],[8,2],[[8,8],[[6,[[1,[3]],5]]]],[[8,8]],[[8,8],[[10,[3]]]],[[8,8],[[10,[[11,[[2,[3]]]]]]]],[[8,8],[[10,[[11,[[2,[3]]]]]]]],[[2,8,8,8],2],[[2,8,8,8]],[[[15,[3]],28],[[6,[17]]]],[2,[[6,[17]]]],[[[15,[3]],28],[[6,[17]]]],[2,[[6,[17]]]],[[[15,[3]],28],[[6,[17]]]],[2,[[6,[17]]]],[[[15,[3]]],8],[2,8],[[2,2]],[[2,2],2],[[2,2]],[[2,2]],[2,[[10,[25]]]],[[]],[[]],[[]],[[],29],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],30],[[],30],[[],30],[[],30],[[[15,[3]]],8],[2,8],[[]],[[]],[[]],[[]],[[],2]],"p":[[3,"VirtualPolynomial"],[3,"DenseMultilinearExtension"],[8,"PrimeField"],[8,"IntoIterator"],[4,"ArithErrors"],[4,"Result"],[15,"u64"],[15,"usize"],[15,"bool"],[3,"Vec"],[3,"Arc"],[3,"Radix2EvaluationDomain"],[3,"DensePolynomial"],[8,"Clone"],[3,"VPAuxInfo"],[8,"Default"],[4,"SerializationError"],[8,"PartialEq"],[4,"Option"],[8,"Field"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Error"],[3,"Global"],[3,"Iter"],[3,"IterMut"],[8,"Write"],[3,"String"],[3,"TypeId"]]},\
"hyperplonk":{"doc":"Main module for the HyperPlonk SNARK.","t":[8,16,16,16,16,14,0,10,10,10,13,3,4,2,13,13,13,13,3,13,13,3,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["HyperPlonkSNARK","Index","Proof","ProvingKey","VerifyingKey","build_mle","prelude","preprocess","prove","verify","ArithmeticErrors","CustomizedGates","HyperPlonkErrors","HyperPlonkSNARK","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MockCircuit","PCSErrors","PolyIOPErrors","SelectorColumn","SerializationError","TranscriptError","WitnessColumn","append","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coeff_ref","default","default","default","degree","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_selector_rows","from_witness_rows","get_nv","get_nv","index","init","init","init","init","init","into","into","into","into","into","is_satisfied","jellyfish_turbo_plonk_gate","mock_gate","new","num_selector_columns","num_selector_columns","num_variables","num_witness_columns","num_witness_columns","public_inputs","super_long_selector_gate","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vanilla_plonk_gate","vzip","vzip","vzip","vzip","vzip","witnesses"],"q":["hyperplonk","","","","","","","","","","hyperplonk::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A trait for HyperPlonk SNARKs. A HyperPlonk is derived …","","","","","Build MLE from matrix of witnesses.","","Generate the preprocessed polynomials output by the …","Generate HyperPlonk SNARK proof.","Verify the HyperPlonk proof.","Arithmetic Error: {0}","Customized gate is a list of tuples of (coefficient, …","A <code>enum</code> specifying the possible failure modes of hyperplonk.","","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","","PCS error {0}","PolyIOP error {0}","A column of selectors of length <code>#constraints</code>","An error during (de)serialization: {0}","Transcript error {0}","A column of witnesses of length <code>#constraints</code>","Append a new element to the selector column","Append a new element to the witness column","","","","","","","","","","","","","","","","","","","","","The degree of the algebraic customized gate","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Build selector columns from rows","Build witness columns from rows","the number of variables of the multilinear polynomial that …","the number of variables of the multilinear polynomial that …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a jellyfish turbo plonk gate:","Generate a random gate for <code>num_witness</code> with a highest …","Generate a mock plonk circuit for the input constraint …","number of selector columns","The number of selectors in a customized gate","Number of variables in a multilinear system","number of witness columns","The number of witnesses in a customized gate","","Return a plonk gate where #selector &gt; #witness * 2","","","","","","","","","","","","","","","","","","","","Return a vanilla plonk gate:","","","","","",""],"i":[0,24,24,24,24,0,0,24,24,24,1,0,0,0,1,1,1,1,0,1,1,0,1,1,0,5,6,21,7,1,5,6,21,7,1,5,6,7,5,6,7,5,6,6,7,5,6,7,21,7,1,5,6,21,7,1,5,6,21,7,1,5,6,7,5,7,1,1,5,6,21,7,1,1,1,1,1,1,5,6,5,6,5,6,21,21,7,1,5,6,21,7,1,5,6,21,7,7,21,21,7,21,21,7,21,7,7,5,6,1,21,7,1,5,6,21,7,1,5,6,21,7,1,5,6,7,21,7,1,5,6,21],"f":[0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[3,1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[5,[4]],4]],[[[6,[4]],4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[[[5,[[0,[8,4]]]]],[[5,[[0,[8,4]]]]]],[[[6,[[0,[8,4]]]]],[[6,[[0,[8,4]]]]]],[[]],[[]],[[]],[[[6,[4]]]],[[],7],[[],[[5,[[0,[9,4]]]]]],[[],[[6,[[0,[9,4]]]]]],[7,10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[[7,7],3],[[[5,[[0,[11,4]]]],5],3],[[7,12],13],[[1,12],13],[[1,12],13],[[[5,[[0,[14,4]]]],12],13],[[[6,[[0,[14,4]]]],12],13],[[]],[[]],[15,1],[16,1],[17,1],[[]],[18,1],[19,1],[[]],[[]],[[],[[2,[[20,[[5,[4]]]],1]]]],[[],[[2,[[20,[[6,[4]]]],1]]]],[[[5,[4]]],10],[[[6,[4]]],10],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[[21,[4]]],3],[[],7],[[10,10],7],[[10,7],[[21,[4]]]],[[[21,[4]]],10],[7,10],[[[21,[4]]],10],[[[21,[4]]],10],[7,10],0,[[],7],[[]],[[]],[[]],[[],22],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],23],[[],23],[[],23],[[],23],[[],23],[[],7],[[]],[[]],[[]],[[]],[[]],0],"p":[[4,"HyperPlonkErrors"],[4,"Result"],[15,"bool"],[8,"PrimeField"],[3,"SelectorColumn"],[3,"WitnessColumn"],[3,"CustomizedGates"],[8,"Clone"],[8,"Default"],[15,"usize"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"ArithErrors"],[4,"SerializationError"],[4,"PolyIOPErrors"],[4,"PCSError"],[4,"TranscriptError"],[3,"Vec"],[3,"MockCircuit"],[3,"String"],[3,"TypeId"],[8,"HyperPlonkSNARK"]]},\
"subroutines":{"doc":"","t":[0,0,14,16,16,16,16,16,8,16,16,16,16,8,16,16,11,10,10,10,10,10,11,10,0,10,10,10,13,3,3,13,13,13,13,3,3,3,3,3,4,2,13,2,13,6,3,3,3,3,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,13,13,13,13,16,13,8,16,16,2,4,8,16,16,13,13,8,16,16,16,13,16,16,8,16,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,12,12,10,10,10,10,14,11,11,11,11,11,11,11,11,10,10,10,10,11,11],"n":["pcs","poly_iop","to_bytes","BatchProof","Commitment","Evaluation","Point","Polynomial","PolynomialCommitmentScheme","Proof","ProverParam","ProverParam","SRS","StructuredReferenceString","VerifierParam","VerifierParam","batch_verify","commit","extract_prover_param","extract_verifier_param","gen_srs_for_testing","gen_srs_for_testing","multi_open","open","prelude","trim","trim","verify","ArithErrors","BatchProof","Commitment","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearKzgPCS","MultilinearKzgProof","MultilinearProverParam","MultilinearUniversalParams","MultilinearVerifierParam","PCSError","PolynomialCommitmentScheme","SerializationError","StructuredReferenceString","TranscriptError","UnivariateKzgBatchProof","UnivariateKzgPCS","UnivariateKzgProof","UnivariateProverParam","UnivariateUniversalParams","UnivariateVerifierParam","batch_verify","beta_h","beta_h","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","extract_prover_param","extract_prover_param","extract_verifier_param","extract_verifier_param","f_i_eval_at_point_i","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","gen_srs_for_testing","gen_srs_for_testing","gen_srs_for_testing","gen_srs_for_testing","get_hash","h","h","h","h","h_mask","h_mask","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","max_degree","multi_open","num_vars","num_vars","open","open","powers_of_g","powers_of_g","powers_of_g","proof","proofs","prover_param","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","trim","trim","trim","trim","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","PolyIOP","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","extract_sum","fmt","from","init","init_transcript","init_transcript","init_transcript","init_transcript","into","prelude","prove","prove","prove","prove","to_owned","try_from","try_into","type_id","verify","verify","verify","verify","vzip","ArithmeticErrors","IOPProof","InvalidChallenge","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearExtension","PCSErrors","PermutationCheck","PermutationCheckSubClaim","PermutationProof","PolyIOP","PolyIOPErrors","ProductCheck","ProductCheckProof","ProductCheckSubClaim","SerializationErrors","ShouldNotArrive","SumCheck","SumCheckProof","SumCheckSubClaim","Transcript","TranscriptErrors","VPAuxInfo","VirtualPolynomial","ZeroCheck","ZeroCheckProof","ZeroCheckSubClaim","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","extract_sum","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init_transcript","init_transcript","init_transcript","init_transcript","into","into","point","proofs","prove","prove","prove","prove","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify","verify","verify","vzip","vzip"],"q":["subroutines","","","subroutines::pcs","","","","","","","","","","","","","","","","","","","","","","","","","subroutines::pcs::preludesubroutines::poly_iop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","subroutines::poly_iop::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Takes as input a struct, and converts them to a series of …","Batch proofs","Commitments","Polynomial Evaluation","Polynomial input domain","Polynomial and its associated types","This trait defines APIs for polynomial commitment schemes. …","Proofs","Prover parameters","Prover parameters","Structured reference string","API definitions for structured reference string","Verifier parameters","Verifier parameters","Verifies that <code>value_i</code> is the evaluation at <code>x_i</code> of the …","Generate a commitment for a polynomial","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Build SRS for testing.","Build SRS for testing.","Input a list of multilinear extensions, and a same number …","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","Prelude","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","ArithErrors error {0}","","A commitment is an Affine point.","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","KZG Polynomial Commitment Scheme on multilinear …","proof of opening","Prover Parameters","Universal Parameter","Verifier Parameters","A <code>enum</code> specifying the possible failure modes of the PCS.","","An error during (de)serialization: {0}","","Transcript error {0}","batch proof","KZG Polynomial Commitment Scheme on univariate polynomial.","proof of opening","<code>UnivariateProverParam</code> is used to generate a proof","<code>UniversalParams</code> are the universal parameters for the KZG10 …","<code>UnivariateVerifierParam</code> is used to check evaluation proofs …","Verifies that <code>value_i</code> is the evaluation at <code>x_i</code> of the …","\\\\beta times the above generator of G2.","\\\\beta times the above generator of G2.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a commitment for a polynomial.","Generate a commitment for a polynomial Note that the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the prover parameters from the public parameters.","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Extract the verifier parameters from the public parameters.","f_i(point_i)","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generator for G1","generator of G1","The generator of G1.","Build SRS for testing.","Build SRS for testing.","Build SRS for testing. WARNING: THIS FUNCTION IS FOR …","Build SRS for testing. WARNING: THIS FUNCTION IS FOR …","","generator for G2","generator of G2","The generator of G2.","The generator of G2.","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the maximum supported degree","Input a list of multilinear extensions, and a same number …","number of variables","number of variables","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","<code>pp_{0}</code>, <code>pp_{1}</code>, …,pp_{nu_vars} defined by XZZPD19 where …","Group elements of the form <code>{ \\\\beta^i G }</code>, where <code>i</code> ranges …","Parameters","Evaluation of quotients","Evaluation of quotients","prover parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","","","","","","","","","","","","","","Struct for PolyIOP protocol. It has an associated type <code>F</code> …","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Arithmetic Error: {0}","An IOP proof is a collections of","Invalid challenge: {0}","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","","PCS error {0}","A PermutationCheck w.r.t. <code>(fs, gs, perms)</code> proves that (g1, …","","","","A <code>enum</code> specifying the possible failure modes of the …","A product-check proves that two lists of n-variate …","","","An error during (de)serialization: {0}","Should not arrive to this point","Trait for doing sum check protocols.","","","","Transcript Error: {0}","","","A ZeroCheck for <code>f(x)</code> proves that <code>f(x) = 0</code> for all …","","","","","","","","","","","","","","","","","Extract sum from the proof","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Inputs:","Proves that two lists of n-variate multilinear polynomials …","Generate proof of the sum of polynomial over {0,1}^<code>num_vars</code>","initialize the prover to argue for the sum of polynomial …","Takes as input a struct, and converts them to a series of …","","","","","","","","","Verify that (g1, …, gk) is a permutation of (f1, …, …","Verify that for witness multilinear polynomials (f1, …, …","Verify the claimed sum using the proof","verify the claimed sum using the proof","",""],"i":[0,0,0,40,40,40,40,40,0,40,40,41,40,0,40,41,40,40,41,41,40,41,40,40,0,40,41,40,3,0,0,3,3,3,3,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,31,16,19,31,42,3,8,11,12,13,14,15,16,18,19,20,31,42,3,8,11,12,13,14,15,16,18,19,20,8,11,12,13,14,15,16,18,19,20,8,11,12,13,14,15,16,18,19,20,31,42,8,15,16,18,19,31,42,3,8,11,12,13,14,15,16,18,19,20,31,42,3,8,11,12,13,14,15,16,18,19,20,11,12,13,14,15,16,18,19,20,11,12,13,14,15,16,18,19,20,11,12,13,14,15,16,18,19,20,31,42,3,8,11,12,13,14,15,16,18,19,20,8,14,15,16,18,19,20,11,16,11,16,8,3,3,8,11,12,13,14,15,16,18,19,20,31,42,3,3,3,3,8,11,12,13,14,15,16,18,19,20,12,13,19,31,42,11,16,15,12,13,16,19,11,13,15,31,42,3,8,11,12,13,14,15,16,18,19,20,31,42,3,8,11,12,13,14,15,16,18,19,20,16,31,12,13,31,42,12,16,18,20,14,11,11,12,13,14,15,16,18,19,20,11,12,13,14,15,16,18,19,20,11,12,13,14,15,16,18,19,20,11,12,13,14,15,16,18,19,20,8,11,12,13,14,15,16,18,19,20,3,31,42,11,16,31,42,3,8,11,12,13,14,15,16,18,19,20,31,42,3,8,11,12,13,14,15,16,18,19,20,31,42,3,8,11,12,13,14,15,16,18,19,20,11,12,13,14,15,16,18,19,20,31,42,31,42,3,8,11,12,13,14,15,16,18,19,20,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,37,0,37,37,37,37,37,43,37,0,44,44,0,0,0,45,45,37,37,0,43,43,43,37,43,43,0,46,46,37,39,37,39,39,39,39,37,39,37,39,37,39,39,43,37,37,39,37,37,37,37,37,39,37,39,44,45,43,46,37,39,39,39,44,45,43,46,0,39,37,37,39,37,39,37,39,44,45,43,46,37,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],[5,[[4,[3]]]],[6],[6],[6,[[4,[3]]]],[6,[[4,[3]]]],[[5,1],[[4,[3]]]],[5,[[4,[3]]]],0,[[5,[7,[6]],[7,[6]]],[[4,[3]]]],[6,[[4,[3]]]],[[],[[4,[2,3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[[[11,[[0,[9,10]]]]],[[11,[[0,[9,10]]]]]],[[[12,[[0,[9,10]]]]],[[12,[[0,[9,10]]]]]],[[[13,[[0,[9,10]]]]],[[13,[[0,[9,10]]]]]],[[[14,[[0,[9,10]]]]],[[14,[[0,[9,10]]]]]],[[[15,[10]]],[[15,[10]]]],[[[16,[[0,[9,10]]]]],[[16,[[0,[9,10]]]]]],[[[18,[[0,[9,17]]]]],[[18,[[0,[9,17]]]]]],[[[19,[10]]],[[19,[10]]]],[[[20,[[0,[9,10]]]]],[[20,[[0,[9,10]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[4,[3]]]],[5,[[4,[3]]]],[[],8],[[],[[15,[10]]]],[[],[[16,[[0,[21,10]]]]]],[[],[[18,[[0,[21,17]]]]]],[[],[[19,[10]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[22,[[4,[[11,[10]],23]]]],[22,[[4,[[12,[10]],23]]]],[22,[[4,[[13,[10]],23]]]],[22,[[4,[[14,[10]],23]]]],[22,[[4,[[15,[10]],23]]]],[22,[[4,[[16,[10]],23]]]],[22,[[4,[[18,[17]],23]]]],[22,[[4,[[19,[10]],23]]]],[22,[[4,[[20,[10]],23]]]],[22,[[4,[[11,[10]],23]]]],[22,[[4,[[12,[10]],23]]]],[22,[[4,[[13,[10]],23]]]],[22,[[4,[[14,[10]],23]]]],[22,[[4,[[15,[10]],23]]]],[22,[[4,[[16,[10]],23]]]],[22,[[4,[[18,[17]],23]]]],[22,[[4,[[19,[10]],23]]]],[22,[[4,[[20,[10]],23]]]],[22,[[4,[[11,[10]],23]]]],[22,[[4,[[12,[10]],23]]]],[22,[[4,[[13,[10]],23]]]],[22,[[4,[[14,[10]],23]]]],[22,[[4,[[15,[10]],23]]]],[22,[[4,[[16,[10]],23]]]],[22,[[4,[[18,[17]],23]]]],[22,[[4,[[19,[10]],23]]]],[22,[[4,[[20,[10]],23]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[8,8],2],[[[14,[[0,[24,10]]]],14],2],[[[15,[10]],[15,[10]]],2],[[[16,[[0,[24,10]]]],16],2],[[[18,[[0,[24,17]]]],18],2],[[[19,[10]],[19,[10]]],2],[[[20,[[0,[24,10]]]],20],2],[[[11,[10]],6]],[[[16,[10]],6]],[[[11,[10]],6]],[[[16,[10]],6]],0,[[3,25],26],[[3,25],26],[[8,25],26],[[[11,[[0,[27,10]]]],25],26],[[[12,[[0,[27,10]]]],25],26],[[[13,[[0,[27,10]]]],25],26],[[[14,[[0,[27,10]]]],25],26],[[[15,[10]],25],26],[[[16,[[0,[27,10]]]],25],26],[[[18,[[0,[27,17]]]],25],26],[[[19,[10]],25],26],[[[20,[[0,[27,10]]]],25],26],[[]],[[]],[[]],[28,3],[29,3],[23,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[6,[[4,[3]]]],[6,[[4,[3]]]],[6,[[4,[[11,[10]],3]]]],[6,[[4,[[16,[10]],3]]]],[[],30],0,0,0,0,0,0,[[[15,[10]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[10]]],6],[[5,1],[[4,[[8,[10,[31,[10]]]],3]]]],0,0,[5,[[4,[3]]]],[5,[[4,[3]]]],0,0,0,0,0,0,[[[11,[10]],32],[[4,[23]]]],[[[12,[10]],32],[[4,[23]]]],[[[13,[10]],32],[[4,[23]]]],[[[14,[10]],32],[[4,[23]]]],[[[15,[10]],32],[[4,[23]]]],[[[16,[10]],32],[[4,[23]]]],[[[18,[17]],32],[[4,[23]]]],[[[19,[10]],32],[[4,[23]]]],[[[20,[10]],32],[[4,[23]]]],[[[11,[10]],32],[[4,[23]]]],[[[12,[10]],32],[[4,[23]]]],[[[13,[10]],32],[[4,[23]]]],[[[14,[10]],32],[[4,[23]]]],[[[15,[10]],32],[[4,[23]]]],[[[16,[10]],32],[[4,[23]]]],[[[18,[17]],32],[[4,[23]]]],[[[19,[10]],32],[[4,[23]]]],[[[20,[10]],32],[[4,[23]]]],[[[11,[10]],32],[[4,[23]]]],[[[12,[10]],32],[[4,[23]]]],[[[13,[10]],32],[[4,[23]]]],[[[14,[10]],32],[[4,[23]]]],[[[15,[10]],32],[[4,[23]]]],[[[16,[10]],32],[[4,[23]]]],[[[18,[17]],32],[[4,[23]]]],[[[19,[10]],32],[[4,[23]]]],[[[20,[10]],32],[[4,[23]]]],[[[11,[10]]],6],[[[12,[10]]],6],[[[13,[10]]],6],[[[14,[10]]],6],[[[15,[10]]],6],[[[16,[10]]],6],[[[18,[17]]],6],[[[19,[10]]],6],[[[20,[10]]],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[5,[7,[6]],[7,[6]]],[[4,[3]]]],[[5,[7,[6]],[7,[6]]],[[4,[3]]]],[[[11,[10]],6],[[4,[3]]]],[[[16,[10]],6],[[4,[3]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[[11,[10]]],6],[[[12,[10]]],6],[[[13,[10]]],6],[[[14,[10]]],6],[[[15,[10]]],6],[[[16,[10]]],6],[[[18,[17]]],6],[[[19,[10]]],6],[[[20,[10]]],6],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[36,[[0,[9,35]]]]],[[36,[[0,[9,35]]]]]],[[]],[[],[[36,[[0,[21,35]]]]]],[6],[6],[6],[[[36,[[0,[24,35]]]],36],2],[[],35],[[[36,[[0,[27,35]]]],25],26],[[]],[[],6],[[]],[[]],[[]],[[]],[[]],0,[[],[[4,[37]]]],[[],[[4,[37]]]],[1,[[4,[37]]]],[1,[[4,[37]]]],[[]],[[],4],[[],4],[[],34],[38,[[4,[37]]]],[[],[[4,[37]]]],[35,[[4,[37]]]],[[],[[4,[37]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[39,[[0,[9,35]]]]],[[39,[[0,[9,35]]]]]],[[]],[[],[[39,[[0,[21,35]]]]]],[6],[6],[6],[6],[6],[6],[[[39,[[0,[24,35]]]],39],2],[[]],[[37,25],26],[[37,25],26],[[[39,[[0,[27,35]]]],25],26],[3,37],[23,37],[28,37],[29,37],[[]],[[]],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,[[4,[37]]]],[1,[[4,[37]]]],[[],[[4,[37]]]],[[],[[4,[37]]]],0,[[]],[[],33],[[],4],[[],4],[[],4],[[],4],[[],34],[[],34],[[],[[4,[37]]]],[38,[[4,[37]]]],[[],[[4,[37]]]],[[],[[4,[37]]]],[[]],[[]]],"p":[[3,"IOPTranscript"],[15,"bool"],[4,"PCSError"],[4,"Result"],[8,"Borrow"],[15,"usize"],[4,"Option"],[3,"BatchProof"],[8,"Clone"],[8,"PairingEngine"],[3,"MultilinearUniversalParams"],[3,"MultilinearProverParam"],[3,"MultilinearVerifierParam"],[3,"MultilinearKzgProof"],[3,"Commitment"],[3,"UnivariateUniversalParams"],[8,"AffineCurve"],[3,"UnivariateProverParam"],[3,"UnivariateVerifierParam"],[3,"UnivariateKzgProof"],[8,"Default"],[8,"Read"],[4,"SerializationError"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"TranscriptError"],[4,"ArithErrors"],[15,"u64"],[3,"MultilinearKzgPCS"],[8,"Write"],[3,"String"],[3,"TypeId"],[8,"PrimeField"],[3,"PolyIOP"],[4,"PolyIOPErrors"],[3,"VPAuxInfo"],[3,"IOPProof"],[8,"PolynomialCommitmentScheme"],[8,"StructuredReferenceString"],[3,"UnivariateKzgPCS"],[8,"SumCheck"],[8,"PermutationCheck"],[8,"ProductCheck"],[8,"ZeroCheck"]]},\
"transcript":{"doc":"Module for PolyIOP transcript. TODO(ZZ): move this module …","t":[3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11],"n":["IOPTranscript","InvalidTranscript","SerializationError","TranscriptError","append_field_element","append_message","append_serializable_element","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","get_and_append_challenge","get_and_append_challenge_vectors","init","init","into","into","new","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["transcript","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An IOP transcript consists of a Merlin transcript and a …","Invalid Transcript: {0}","An error during (de)serialization: {0}","A <code>enum</code> specifying the possible failure modes of the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new IOP transcript.","Takes as input a struct, and converts them to a series of …","","","","","","","","","",""],"i":[0,3,3,0,2,2,2,3,2,3,2,2,2,3,2,3,2,3,2,3,3,3,3,2,2,2,3,2,3,2,2,0,2,3,3,2,3,2,3,2,3,2],"f":[0,0,0,0,[[[2,[1]]],[[4,[3]]]],[[[2,[1]]],[[4,[3]]]],[[[2,[1]]],[[4,[3]]]],[[]],[[]],[[]],[[]],[[[2,[[0,[5,1]]]]],[[2,[[0,[5,1]]]]]],[[]],[6],[6],[6],[6],[6],[6],[[3,7],8],[[3,7],8],[[]],[9,3],[[]],[[[2,[1]]],[[4,[1,3]]]],[[[2,[1]],6],[[4,[[10,[1]],3]]]],[[],6],[[],6],[[]],[[]],[[],[[2,[1]]]],0,[[]],[[],11],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[]],[[]]],"p":[[8,"PrimeField"],[3,"IOPTranscript"],[4,"TranscriptError"],[4,"Result"],[8,"Clone"],[15,"usize"],[3,"Formatter"],[6,"Result"],[4,"SerializationError"],[3,"Vec"],[3,"String"],[3,"TypeId"]]},\
"util":{"doc":"Utilities for parallel code.","t":[5],"n":["parallelizable_slice_iter"],"q":["util"],"d":["this function helps with slice iterator creation that …"],"i":[0],"f":[[[],[[2,[1]]]]],"p":[[8,"Sync"],[3,"Iter"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
