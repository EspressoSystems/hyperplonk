var searchIndex = JSON.parse('{\
"arithmetic":{"doc":"","t":[4,3,13,13,13,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["ArithErrors","DenseMultilinearExtension","InvalidParameters","SerializationErrors","ShouldNotArrive","VPAuxInfo","VirtualPolynomial","add","add_assign","add_assign","add_assign","add_mle_list","aux_info","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_eq_x_r","build_f_hat","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize_unchecked","deserialize_uncompressed","drop","drop","drop","drop","eq","eq","eq","evaluate","evaluate","evaluations","fix_variables","flattened_ml_extensions","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_evaluations_slice","from_evaluations_vec","get_hash","hash","index","init","init","init","init","into","into","into","into","is_zero","iter","iter_mut","max_degree","mul_by_mle","ne","ne","ne","neg","new","new_from_mle","num_variables","num_vars","num_vars","print_evals","products","rand","rand","rand_zero","random_zero_mle_list","relabel","relabel_inplace","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","sub","sub_assign","sub_assign","to_evaluations","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uncompressed_size","uncompressed_size","vzip","vzip","vzip","vzip","zero","0","0"],"q":["arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arithmetic::ArithErrors",""],"d":["A <code>enum</code> specifying the possible failure modes of the …","Stores a multilinear polynomial in dense evaluation form.","Invalid parameters: {0}","An error during (de)serialization: {0}","Should not arrive to this point","Auxiliary information about the multilinear polynomial","A virtual polynomial is a sum of products of multilinear …","","","","","Add a product of list of multilinear extensions to self …","Aux information about the multilinear polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the virtual polynomial at point <code>point</code>. Returns an …","","The evaluation over {0,1}^<code>num_vars</code>","","Stores multilinear extensions in which product …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new polynomial from a list of evaluations …","Construct a new polynomial from a list of evaluations …","","","Returns the evaluation of the polynomial at a point …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns an iterator that iterates over the evaluations …","Returns a mutable iterator that iterates over the …","max number of multiplicands in each product","Multiple the current VirtualPolynomial by an MLE:","","","","","Creates an empty virtual polynomial with <code>num_variables</code>.","Creates an new virtual polynomial from a MLE and its …","number of variables of the polynomial","","Number of variables","Print out the evaluation map for testing. Panic if the …","list of reference to products (as usize) of multilinear …","Sample a random virtual polynomial, return the polynomial …","","Sample a random virtual polynomial that evaluates to zero …","","","Relabel the point inplace by switching <code>k</code> scalars from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,0,2,2,2,2,3,3,1,3,4,2,1,3,4,2,0,3,3,4,2,3,4,2,3,4,2,1,3,4,2,1,3,4,2,2,2,2,1,3,4,2,3,4,2,3,2,2,2,3,1,1,3,4,2,1,1,3,4,2,2,2,2,2,2,1,3,4,2,1,3,4,2,2,2,2,4,3,3,4,2,2,3,3,4,2,2,3,3,3,2,3,0,2,2,4,2,4,2,4,2,4,2,2,2,2,2,3,4,2,1,1,3,4,2,1,3,4,2,1,3,4,2,4,2,1,3,4,2,2,5,6],"f":[null,null,null,null,null,null,null,[[["densemultilinearextension",3]],["densemultilinearextension",3]],[[["",0]]],[[["",0],["densemultilinearextension",3]]],[[["",0],["densemultilinearextension",3]]],[[["",0]],["result",4,[["aritherrors",4]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4,[["rc",3,[["densemultilinearextension",3,[["primefield",8]]]]],["aritherrors",4]]]],[[["",0]],["result",4,[["aritherrors",4]]]],[[["",0]],["virtualpolynomial",3]],[[["",0]],["vpauxinfo",3]],[[["",0]],["densemultilinearextension",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["virtualpolynomial",3]],[[],["vpauxinfo",3]],[[],["densemultilinearextension",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4,[["densemultilinearextension",3],["serializationerror",4]]]],[[],["result",4,[["densemultilinearextension",3],["serializationerror",4]]]],[[],["result",4,[["densemultilinearextension",3],["serializationerror",4]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["virtualpolynomial",3]],["bool",0]],[[["",0],["vpauxinfo",3]],["bool",0]],[[["",0],["densemultilinearextension",3]],["bool",0]],[[["",0]],["result",4,[["aritherrors",4]]]],[[["",0]],["option",4]],null,[[["",0]],["densemultilinearextension",3]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["serializationerror",4]]],[[]],[[]],[[]],[[]],[[["usize",0]],["densemultilinearextension",3]],[[["usize",0],["vec",3,[["global",3]]]],["densemultilinearextension",3]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["usize",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],null,[[["",0],["rc",3,[["densemultilinearextension",3]]]],["result",4,[["aritherrors",4]]]],[[["",0],["virtualpolynomial",3]],["bool",0]],[[["",0],["vpauxinfo",3]],["bool",0]],[[["",0],["densemultilinearextension",3]],["bool",0]],[[]],[[["usize",0]]],[[["rc",3,[["densemultilinearextension",3]]]]],null,[[["",0]],["usize",0]],null,[[["",0]]],null,[[["usize",0],["usize",0],["",0]],["result",4,[["aritherrors",4]]]],[[["usize",0],["",0]],["densemultilinearextension",3]],[[["usize",0],["usize",0],["",0]],["result",4,[["aritherrors",4]]]],[[["usize",0],["usize",0],["",0]],["vec",3,[["rc",3,[["densemultilinearextension",3,[["primefield",8]]]]]]]],[[["",0],["usize",0],["usize",0],["usize",0]],["densemultilinearextension",3]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0]],["result",4,[["serializationerror",4]]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["densemultilinearextension",3]],["densemultilinearextension",3]],[[["",0],["densemultilinearextension",3]]],[[["",0],["densemultilinearextension",3]]],[[["",0]],["vec",3,[["global",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[]],[[],["densemultilinearextension",3]],null,null],"p":[[4,"ArithErrors"],[3,"DenseMultilinearExtension"],[3,"VirtualPolynomial"],[3,"VPAuxInfo"],[13,"InvalidParameters"],[13,"SerializationErrors"]]},\
"hyperplonk":{"doc":"Main module for the HyperPlonk PolyIOP.","t":[8,16,16,16,16,14,10,10,10],"n":["HyperPlonkSNARK","Parameters","Proof","ProvingKey","VerifyingKey","build_mle","preprocess","prove","verify"],"q":["hyperplonk","","","","","","","",""],"d":["A trait for HyperPlonk Poly-IOPs. A HyperPlonk is derived …","","","","","Build MLE from matrix of witnesses.","Generate the preprocessed polynomials output by the …","Generate HyperPlonk SNARK proof.","Verify the HyperPlonk proof."],"i":[0,1,1,1,1,0,1,1,1],"f":[null,null,null,null,null,null,[[],["result",4,[["hyperplonkerrors",4]]]],[[],["result",4,[["hyperplonkerrors",4]]]],[[],["result",4,[["bool",0],["hyperplonkerrors",4]]]]],"p":[[8,"HyperPlonkSNARK"]]},\
"pcs":{"doc":"","t":[16,16,16,16,16,16,8,16,16,16,16,8,16,16,10,10,10,10,10,10,10,10,10,0,10,10,10,3,3,13,13,13,13,3,3,3,3,4,2,3,13,2,13,3,3,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["BatchCommitment","BatchProof","Commitment","Evaluation","Point","Polynomial","PolynomialCommitmentScheme","Proof","ProverParam","ProverParam","SRS","StructuredReferenceString","VerifierParam","VerifierParam","batch_verify","commit","extract_prover_param","extract_verifier_param","gen_srs_for_testing","gen_srs_for_testing","multi_commit","multi_open","open","prelude","trim","trim","verify","BatchProof","Commitment","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","KZGMultilinearPCS","MultilinearProverParam","MultilinearUniversalParams","MultilinearVerifierParam","PCSErrors","PolynomialCommitmentScheme","Proof","SerializationErrors","StructuredReferenceString","TranscriptErrors","UnivariateProverParam","UnivariateUniversalParams","UnivariateVerifierParam","batch_verify","beta_h","beta_h","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commitment","compute_qx_degree","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_unchecked","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","deserialize_uncompressed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","extract_prover_param","extract_prover_param","extract_verifier_param","extract_verifier_param","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","gen_srs_for_testing","gen_srs_for_testing","gen_srs_for_testing","get_batched_nv","h","h","h","h","h_mask","h_mask","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","merge_polynomials","multi_commit","multi_open","ne","num_vars","num_vars","open","powers_of_g","powers_of_g","powers_of_g","proof","proofs","prover_param","q_x_commit","q_x_opens","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","trim","trim","trim","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","uncompressed_size","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0"],"q":["pcs","","","","","","","","","","","","","","","","","","","","","","","","","","","pcs::preludepcs::prelude::PCSErrors","","","","",""],"d":["","","","","","","This trait defines APIs for polynomial commitment schemes. …","","","","","API definitions for structured reference string","","","Verifies that <code>value_i</code> is the evaluation at <code>x_i</code> of the …","Generate a commitment for a polynomial","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Build SRS for testing.","Build SRS for testing.","Generate a commitment for a list of polynomials","Input a list of MLEs, and a same number of points, and a …","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","proof of batch opening","A commitment is an Affine point.","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","KZG Polynomial Commitment Scheme on multilinear …","Prover Parameters","Universal Parameter","Verifier Parameters","A <code>enum</code> specifying the possible failure modes of the PCS.","","proof of opening","An error during (de)serialization: {0}","","Transcript error {0}","Prover Parameters","<code>UniversalParams</code> are the universal parameters for the KZG10 …","<code>VerifierKey</code> is used to check evaluation proofs for a given …","Verifies that <code>value</code> is the evaluation at <code>x_i</code> of the …","\\\\beta times the above generator of G2.","\\\\beta times the above generator of G2.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a commitment for a polynomial.","the actual commitment is an affine point.","For an MLE w with <code>mle_num_vars</code> variables, and <code>point_len</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the prover parameters from the public parameters.","Extract the prover parameters from the public parameters.","Extract the verifier parameters from the public parameters.","Extract the verifier parameters from the public parameters.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generator for G1","generator of G1","The generator of G1.","Build SRS for testing.","Build SRS for testing. WARNING: THIS FUNCTION IS FOR …","Build SRS for testing. WARNING: THIS FUNCTION IS FOR …","Return the number of variables that one need for an MLE to …","generator for G2","generator of G2","The generator of G2.","The generator of G2.","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","h^randomness: h^t1, h^t2, …, <strong>h^{t_nv}</strong>","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","merge a set of polynomials. Returns an error if the …","Generate a commitment for a list of polynomials.","Input","","number of variables","number of variables","On input a polynomial <code>p</code> and a point <code>point</code>, outputs a proof …","<code>pp_{num_vars}</code>, <code>pp_{num_vars - 1}</code>, <code>pp_{num_vars - 2}</code>, …, …","Group elements of the form <code>{ \\\\beta^i G }</code>, where <code>i</code> ranges …","","The actual proof","Evaluation of quotients","prover parameters","Commitment to q(x):= w(l(x)) where","openings of q(x) at 1, omega, …, and r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","Trim the universal parameters to specialize the public …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that <code>value</code> is the evaluation at <code>x</code> of the …","","","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,0,1,1,2,1,0,1,2,1,1,2,2,1,2,1,1,1,0,1,2,1,0,0,3,3,3,3,0,0,0,0,0,0,0,3,0,3,0,0,0,4,5,6,4,3,7,8,9,10,11,12,5,13,6,4,3,7,8,9,10,11,12,5,13,6,7,8,9,10,11,12,5,13,6,7,8,9,10,11,12,5,13,6,4,12,0,12,4,3,7,8,9,10,11,12,5,13,6,4,3,7,8,9,10,11,12,5,13,6,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,4,3,7,8,9,10,11,12,5,13,6,12,7,5,7,5,3,3,7,8,9,10,11,12,5,13,6,4,3,3,3,7,8,9,10,11,12,5,13,6,8,9,6,4,7,5,0,8,9,5,6,7,9,4,3,7,8,9,10,11,12,5,13,6,4,3,7,8,9,10,11,12,5,13,6,0,4,4,12,8,9,4,8,5,13,11,10,7,11,11,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,5,13,6,3,4,7,5,4,3,7,8,9,10,11,12,5,13,6,4,3,7,8,9,10,11,12,5,13,6,4,3,7,8,9,10,11,12,5,13,6,7,8,9,10,11,12,13,4,4,3,7,8,9,10,11,12,5,13,6,14,15,16,17,18,19],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["bool",0],["pcserrors",4]]]],[[],["result",4,[["pcserrors",4]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[],["result",4,[["pcserrors",4]]]],[[],["result",4,[["pcserrors",4]]]],[[],["result",4,[["pcserrors",4]]]],null,[[["usize",0],["option",4,[["usize",0]]]],["result",4,[["pcserrors",4]]]],[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[],["result",4,[["bool",0],["pcserrors",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["bool",0],["pcserrors",4]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["multilinearuniversalparams",3]],[[["",0]],["multilinearproverparam",3]],[[["",0]],["multilinearverifierparam",3]],[[["",0]],["proof",3]],[[["",0]],["batchproof",3]],[[["",0]],["commitment",3]],[[["",0]],["univariateuniversalparams",3]],[[["",0]],["univariateproverparam",3]],[[["",0]],["univariateverifierparam",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4,[["pcserrors",4]]]],null,[[["usize",0],["usize",0]],["usize",0]],[[],["commitment",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["read",8]],["result",4,[["serializationerror",4]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["commitment",3]],["bool",0]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["transcripterrors",4]]],[[]],[[["serializationerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[["usize",0],["usize",0]],["usize",0]],null,null,null,null,null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["densemultilinearextension",3,[["primefield",8]]],["pcserrors",4]]]],[[],["result",4,[["pcserrors",4]]]],[[],["result",4,[["pcserrors",4]]]],[[["",0],["commitment",3]],["bool",0]],null,null,[[],["result",4,[["pcserrors",4]]]],null,null,null,null,null,null,null,null,[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0],["write",8]],["result",4,[["serializationerror",4]]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["usize",0],["option",4,[["usize",0]]]],["result",4,[["pcserrors",4]]]],[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[["",0],["usize",0]],["result",4,[["pcserrors",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[],["result",4,[["bool",0],["pcserrors",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null],"p":[[8,"PolynomialCommitmentScheme"],[8,"StructuredReferenceString"],[4,"PCSErrors"],[3,"KZGMultilinearPCS"],[3,"UnivariateUniversalParams"],[3,"UnivariateVerifierParam"],[3,"MultilinearUniversalParams"],[3,"MultilinearProverParam"],[3,"MultilinearVerifierParam"],[3,"Proof"],[3,"BatchProof"],[3,"Commitment"],[3,"UnivariateProverParam"],[13,"InvalidProver"],[13,"InvalidVerifier"],[13,"InvalidProof"],[13,"InvalidParameters"],[13,"SerializationErrors"],[13,"TranscriptErrors"]]},\
"poly_iop":{"doc":"","t":[13,13,13,13,13,13,16,16,8,16,16,3,4,8,16,16,16,13,13,8,16,16,16,13,16,16,8,16,16,5,11,11,11,11,10,11,10,11,11,11,11,10,11,11,11,10,10,11,5,11,10,10,10,10,11,11,11,11,0,10,11,10,10,10,10,11,11,11,5,14,14,11,11,11,11,10,11,10,10,10,10,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,16,16,8,16,16,2,4,13,13,8,16,16,16,13,16,16,8,16,16,5,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,10,5,11,10,10,10,11,10,10,10,10,5,14,11,11,11,11,10,10,10,10,11,12,12,12,12,12,12,12,12],"n":["ArithmeticErrors","InvalidChallenge","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearExtension","PermutationChallenge","PermutationCheck","PermutationCheckSubClaim","PermutationProof","PolyIOP","PolyIOPErrors","ProductCheck","ProductCheckChallenge","ProductCheckSubClaim","ProductProof","SerializationErrors","ShouldNotArrive","SumCheck","SumCheckProof","SumCheckSubClaim","Transcript","TranscriptErrors","VPAuxInfo","VirtualPolynomial","ZeroCheck","ZeroCheckProof","ZeroCheckSubClaim","bit_decompose","borrow","borrow_mut","clone","clone_into","compute_prod_evals","compute_prod_evals","compute_product_poly","default","deref","deref_mut","drop","extract_sum","extract_sum","fmt","from","generate_challenge","generate_challenge","generate_challenge","identity_permutation_mle","init","init_transcript","init_transcript","init_transcript","init_transcript","init_transcript","init_transcript","init_transcript","into","prelude","preprocess","preprocess","prove","prove","prove","prove","prove","prove","prove","random_permutation_mle","to_bytes","to_bytes","to_owned","try_from","try_into","type_id","update_challenge","update_challenge","verify","verify","verify","verify","verify","verify","verify","vzip","0","0","0","0","0","0","0","0","ArithmeticErrors","InvalidChallenge","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearExtension","PermutationChallenge","PermutationCheck","PermutationCheckSubClaim","PermutationProof","PolyIOP","PolyIOPErrors","SerializationErrors","ShouldNotArrive","SumCheck","SumCheckProof","SumCheckSubClaim","Transcript","TranscriptErrors","VPAuxInfo","VirtualPolynomial","ZeroCheck","ZeroCheckProof","ZeroCheckSubClaim","bit_decompose","borrow","borrow_mut","commit_prod_x","commit_prod_x","commit_prod_x","compute_prod_evals","deref","deref_mut","drop","extract_sum","fmt","fmt","from","from","from","from","generate_challenge","identity_permutation_mle","init","init_transcript","init_transcript","init_transcript","into","preprocess","prove","prove","prove","random_permutation_mle","to_bytes","to_string","try_from","try_into","type_id","update_challenge","verify","verify","verify","vzip","0","0","0","0","0","0","0","0"],"q":["poly_iop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","poly_iop::PolyIOPErrors","","","","","","","","poly_iop::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","poly_iop::prelude::PolyIOPErrors","","","","","","",""],"d":["Arithmetic Error: {0}","Invalid challenge: {0}","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","","","A PermutationCheck is derived from ZeroCheck.","","","Struct for PolyIOP protocol. It has an associated type <code>F</code> …","A <code>enum</code> specifying the possible failure modes of the …","A ProductCheck is derived from ZeroCheck.","","","","An error during (de)serialization: {0}","Should not arrive to this point","Trait for doing sum check protocols.","","","","Transcript Error: {0}","","","A ZeroCheck is derived from SumCheck.","","","Decompose an integer into a binary vector in little endian.","","","","","Step 2 of the IOP.","Step 2 of the IOP.","Compute the product polynomial <code>prod(x)</code> where","","","","","Extract sum from the proof","Extract sum from the proof","","Returns the argument unchanged.","Step 1 of the IOP. Generate challenge beta and gamma from …","Generate random challenge <code>alpha</code> from a transcript.","Step 1 of the IOP. Generate challenge beta and gamma from …","An MLE that represent an identity permutation: …","","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Calls <code>U::from(self)</code>.","","Generate the preprocessed polynomial for the permutation …","Generate the preprocessed polynomial for the permutation …","Step 5 of the IOP.","Initialize the prover to argue that for a virtual …","Generate proof of the sum of polynomial over {0,1}^<code>num_vars</code>","initialize the prover to argue for the sum of polynomial …","Initialize the prover to argue for the sum of polynomial …","Step 5 of the IOP.","Generate proof of the sum of polynomial over {0,1}^<code>num_vars</code>","An MLE that represent a random permutation","Takes as input a struct, and converts them to a series of …","Takes as input a struct, and converts them to a series of …","","","","","Step 4 of the IOP. Update the challenge with alpha; …","Step 4 of the IOP. Update the challenge with alpha; …","Verify that an MLE g(x) is a permutation of MLE f(x) over …","Verify that for a witness virtual polynomial f(x), it …","Verify the claimed sum using the proof","verify the claimed sum using the proof","Verify the claimed sum using the proof","Verify that an MLE g(x) is a permutation of an MLE f(x) …","Verify that the polynomial’s sum is zero using the proof.","","","","","","","","","","Arithmetic Error: {0}","Invalid challenge: {0}","Invalid parameters: {0}","Invalid Proof: {0}","Invalid Prover: {0}","Invalid Verifier: {0}","","","A PermutationCheck is derived from ZeroCheck.","","","","A <code>enum</code> specifying the possible failure modes of the …","An error during (de)serialization: {0}","Should not arrive to this point","Trait for doing sum check protocols.","","","","Transcript Error: {0}","","","A ZeroCheck is derived from SumCheck.","","","Decompose an integer into a binary vector in little endian.","","","Step 3 of the IOP. push a commitment of <code>prod(x)</code> to the …","Step 3 of the IOP. push a commitment of <code>prod(x)</code> to the …","Step 3 of the IOP. push a commitment of <code>prod(x)</code> to the …","Step 2 of the IOP.","","","","Extract sum from the proof","","","","","","Returns the argument unchanged.","Step 1 of the IOP. Generate challenge beta and gamma from …","An MLE that represent an identity permutation: …","","Initialize the system with a transcript","Initialize the system with a transcript","Initialize the system with a transcript","Calls <code>U::from(self)</code>.","Generate the preprocessed polynomial for the permutation …","Step 5 of the IOP.","Generate proof of the sum of polynomial over {0,1}^<code>num_vars</code>","initialize the prover to argue for the sum of polynomial …","An MLE that represent a random permutation","Takes as input a struct, and converts them to a series of …","","","","","Step 4 of the IOP. Update the challenge with alpha; …","Verify that an MLE g(x) is a permutation of MLE f(x) over …","Verify the claimed sum using the proof","verify the claimed sum using the proof","","","","","","","","",""],"i":[1,1,1,1,1,1,2,3,0,3,3,0,0,0,4,4,4,1,1,0,2,2,2,1,2,2,0,5,5,0,6,6,6,6,3,6,4,6,6,6,6,2,6,6,6,3,4,6,0,6,3,4,2,5,6,6,6,6,0,3,6,3,4,2,5,6,6,6,0,0,0,6,6,6,6,3,6,3,4,2,5,6,6,6,6,7,8,9,10,11,12,13,14,1,1,1,1,1,1,2,3,0,3,3,0,0,1,1,0,2,2,2,1,2,2,0,5,5,0,1,1,3,3,3,3,1,1,1,2,1,1,1,1,1,1,3,0,1,3,2,5,1,3,3,2,5,0,0,1,1,1,1,3,3,2,5,1,7,8,9,10,11,12,13,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",0],["usize",0]],["vec",3,[["bool",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["polyiop",3]],[[["",0],["",0]]],[[["densemultilinearextension",3],["densemultilinearextension",3],["densemultilinearextension",3]],["result",4,[["polyioperrors",4]]]],[[["densemultilinearextension",3],["densemultilinearextension",3],["densemultilinearextension",3]],["result",4,[["polyioperrors",4]]]],[[["virtualpolynomial",3]],["result",4,[["densemultilinearextension",3],["polyioperrors",4]]]],[[],["polyiop",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[["usize",0]],["densemultilinearextension",3,[["primefield",8]]]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4,[["densemultilinearextension",3],["polyioperrors",4]]]],[[],["result",4,[["densemultilinearextension",3],["polyioperrors",4]]]],[[["ioptranscript",3]],["result",4,[["polyioperrors",4]]]],[[["virtualpolynomial",3],["densemultilinearextension",3],["ioptranscript",3]],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[["ioptranscript",3]],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[["usize",0],["",0]],["densemultilinearextension",3,[["primefield",8]]]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",0],["usize",0]],["vec",3,[["bool",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[["densemultilinearextension",3],["densemultilinearextension",3],["densemultilinearextension",3]],["result",4,[["polyioperrors",4]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["transcripterrors",4]]],[[["serializationerror",4]]],[[["aritherrors",4]]],[[]],[[],["result",4,[["polyioperrors",4]]]],[[["usize",0]],["densemultilinearextension",3,[["primefield",8]]]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[],["result",4,[["densemultilinearextension",3],["polyioperrors",4]]]],[[["ioptranscript",3]],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[["usize",0],["",0]],["densemultilinearextension",3,[["primefield",8]]]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[],["result",4,[["polyioperrors",4]]]],[[]],null,null,null,null,null,null,null,null],"p":[[4,"PolyIOPErrors"],[8,"SumCheck"],[8,"PermutationCheck"],[8,"ProductCheck"],[8,"ZeroCheck"],[3,"PolyIOP"],[13,"InvalidProver"],[13,"InvalidVerifier"],[13,"InvalidProof"],[13,"InvalidParameters"],[13,"InvalidChallenge"],[13,"SerializationErrors"],[13,"TranscriptErrors"],[13,"ArithmeticErrors"]]},\
"transcript":{"doc":"Module for PolyIOP transcript. TODO(ZZ): move this module …","t":[3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,12,12],"n":["IOPTranscript","InvalidTranscript","SerializationError","TranscriptErrors","append_field_element","append_message","append_serializable_element","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","get_and_append_challenge","get_and_append_challenge_vectors","init","init","into","into","new","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0"],"q":["transcript","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transcript::TranscriptErrors",""],"d":["An IOP transcript consists of a Merlin transcript and a …","Invalid Transcript: {0}","An error during (de)serialization: {0}","A <code>enum</code> specifying the possible failure modes of the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new IOP transcript.","Takes as input a struct, and converts them to a series of …","","","","","","","","","","","",""],"i":[0,1,1,0,2,2,2,1,2,1,2,2,2,1,2,1,2,1,2,1,1,1,1,2,2,2,1,2,1,2,2,0,2,1,1,2,1,2,1,2,1,2,3,4],"f":[null,null,null,null,[[["",0],["",0]],["result",4,[["transcripterrors",4]]]],[[["",0]],["result",4,[["transcripterrors",4]]]],[[["",0],["",0]],["result",4,[["transcripterrors",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ioptranscript",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["serializationerror",4]]],[[]],[[["",0]],["result",4,[["transcripterrors",4]]]],[[["",0],["usize",0]],["result",4,[["vec",3],["transcripterrors",4]]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null],"p":[[4,"TranscriptErrors"],[3,"IOPTranscript"],[13,"InvalidTranscript"],[13,"SerializationError"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};