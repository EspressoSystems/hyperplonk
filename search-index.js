var searchIndex = new Map(JSON.parse('[\
["arithmetic",{"t":"GFPPPFFNNNNNNNONHNNNNNNNNHHNHNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNHHOHHHNONNNNNNNNNNNNHHHHNHHNNNNNNNNNNNNOHNNNNONONONNNHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ArithErrors","DenseMultilinearExtension","InvalidParameters","SerializationErrors","ShouldNotArrive","VPAuxInfo","VirtualPolynomial","add","add","add","add_assign","add_assign","add_assign","add_mle_list","aux_info","batch_check","bit_decompose","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_eq_x_r","build_eq_x_r_vec","build_f_hat","build_l","check","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize_with_mode","drop","drop","drop","drop","eq","eq","eq","eq_eval","equivalent","equivalent","equivalent","equivalent","evaluate","evaluate","evaluate_no_par","evaluate_opt","evaluations","fix_last_variables","fix_last_variables_no_par","fix_variables","fix_variables","flattened_ml_extensions","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_evaluations_slice","from_evaluations_vec","gen_eval_point","get_batched_nv","get_index","get_uni_domain","hash","identity_permutation","identity_permutation_mles","index","init","init","init","init","into","into","into","into","is_zero","iter","iter_mut","max_degree","merge_polynomials","mul_by_mle","neg","new","new_from_mle","num_variables","num_vars","num_vars","print_evals","products","rand","rand","rand_zero","random_mle_list","random_permutation","random_permutation_mles","random_zero_mle_list","relabel","relabel_in_place","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","sub","sub","sub_assign","sub_assign","to_evaluations","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zero"],"q":[[0,"arithmetic"],[151,"arithmetic::virtual_polynomial"],[152,"ark_ff::fields::prime"],[153,"ark_poly::evaluations::multivariate::multilinear::dense"],[154,"ark_ff::fields"],[155,"arithmetic::errors"],[156,"core::result"],[157,"alloc::sync"],[158,"core::iter::traits::collect"],[159,"ark_serialize::error"],[160,"core::iter::traits::iterator"],[161,"core::marker"],[162,"alloc::vec"],[163,"ark_poly::domain::radix2"],[164,"ark_poly::polynomial::univariate::dense"],[165,"core::clone"],[166,"core::default"],[167,"ark_serialize"],[168,"std::io"],[169,"core::cmp"],[170,"core::option"],[171,"core::fmt"],[172,"core::hash"],[173,"core::slice::iter"],[174,"rand_core"],[175,"rand::rng"],[176,"alloc::string"],[177,"core::any"],[178,"arithmetic::util"],[179,"arithmetic::univariate_polynomial"],[180,"arithmetic::multilinear_polynomial"]],"i":[0,0,7,7,7,0,0,1,3,3,3,3,3,1,1,3,0,7,1,23,3,7,1,23,3,0,0,1,0,3,1,23,3,1,23,3,1,23,3,7,1,23,3,7,1,23,3,3,7,1,23,3,1,23,3,0,23,23,3,3,1,3,0,0,3,0,0,0,3,1,7,7,1,23,3,7,7,1,23,3,3,3,0,0,0,0,3,0,0,3,7,1,23,3,7,1,23,3,3,3,3,23,0,1,3,1,1,23,3,3,1,1,1,3,1,0,0,0,0,3,3,23,3,23,3,3,3,3,3,3,1,23,3,7,7,1,23,3,7,1,23,3,7,1,23,3,7,1,23,3,3],"f":"```````{{{b{c}}{b{c}}}ed{}}{{{f{c}}{f{c}}}{{f{c}}}h}{{{f{c}}{f{c}}}{}h}{{{f{c}}{f{c}}}jh}{{{f{c}}{l{c{f{c}}}}}jh}1{{{b{c}}ec}{{A`{jn}}}d{{Af{}{{Ab{{Ad{{f{c}}}}}}}}}}`{e{{A`{jAh}}}h{{Aj{}{{Ab{{f{c}}}}}}Al}}{{AnB`}{{Bd{Bb}}}}{ce{}{}}0000000{{{Bf{c}}}{{A`{{Ad{{f{c}}}}n}}}d}{{{Bf{c}}}{{A`{{Bd{c}}n}}}d}{{{b{c}}{Bf{c}}}{{A`{{b{c}}n}}}d}{{{Bf{{Bd{c}}}}{Bh{c}}Bb}{{A`{{Bd{{Bj{c}}}}n}}}d}{{{f{c}}}{{A`{jAh}}}h}{{{b{c}}}{{b{c}}}{Bld}}{{{Bn{c}}}{{Bn{c}}}{Bld}}{{{f{c}}}{{f{c}}}{Blh}}{{ce}j{}{}}00{{}{{b{c}}}{C`d}}{{}{{Bn{c}}}{C`d}}{{}{{f{c}}}{C`h}}{B`c{}}0000000{{cCbCd}{{A`{{f{e}}Ah}}}Cfh}{B`j}000{{{b{c}}{b{c}}}Bb{Chd}}{{{Bn{c}}{Bn{c}}}Bb{Chd}}{{{f{c}}{f{c}}}Bb{Chh}}{{{Bf{c}}{Bf{c}}}{{A`{cn}}}d}{{ce}Bb{}{}}000{{{b{c}}{Bf{c}}}{{A`{cn}}}d}{{{f{c}}{Bf{c}}}{{Cj{c}}}h}{{{f{c}}{Bf{c}}}ch}0`{{{f{c}}{Bf{c}}}{{f{c}}}d}0{{{f{c}}{Bf{c}}}{{f{c}}}h}0`{{nCl}Cn}0{{{b{c}}Cl}Cn{D`d}}{{{Bn{c}}Cl}Cn{D`d}}{{{f{c}}Cl}{{A`{jDb}}}h}{Ahn}{cc{}}000{{B`{Bf{c}}}{{f{c}}}h}{{B`{Bd{c}}}{{f{c}}}h}{{B`B`{Bf{c}}}{{Bd{c}}}d}{{B`B`}B`}{{B`B`}{{l{B`B`Bb}}}}{B`{{A`{{Bh{c}}n}}}d}{{{f{c}}e}j{Ddh}Df}{{B`B`}{{Bd{c}}}d}{{B`B`}{{Bd{{Ad{{f{c}}}}}}}d}{{{f{c}}B`}{}h}{{}B`}000{ce{}{}}000{{{f{c}}}Bbh}{{{f{c}}}{{Dh{c}}}h}{{{f{c}}}{{Dj{c}}}h}`{{{Bf{{Ad{{f{c}}}}}}}{{A`{{Ad{{f{c}}}}n}}}d}{{{b{c}}{Ad{{f{c}}}}c}{{A`{jn}}}d}{{{f{c}}}{}h}{B`{{b{c}}}d}{{{Ad{{f{c}}}}c}{{b{c}}}d}`{{{f{c}}}B`h}`{{{b{c}}}jd}`{{B`{l{B`B`}}B`c}{{A`{{l{{b{e}}e}}n}}}Dld}{{B`c}{{f{e}}}Dnh}{{B`{l{B`B`}}B`c}{{A`{{b{e}}n}}}Dld}{{B`B`c}{{l{{Bd{{Ad{{f{e}}}}}}e}}}Dld}{{B`B`c}{{Bd{e}}}Dld}{{B`B`c}{{Bd{{Ad{{f{e}}}}}}}Dld}0{{{f{c}}B`B`B`}{{f{c}}}h}{{{f{c}}B`B`B`}jh}{{{Bn{c}}eCb}{{A`{jAh}}}dE`}{{{f{c}}eCb}{{A`{jAh}}}hE`}{{{Bn{c}}Cb}B`d}{{{f{c}}Cb}B`h}{{{f{c}}{f{c}}}{{f{c}}}h}{{{f{c}}{f{c}}}{}h}{{{f{c}}{f{c}}}jh}0{{{f{c}}}{{Bd{c}}}h}{ce{}{}}00{cEb{}}{c{{A`{e}}}{}{}}0000000{cEd{}}0003333{{}{{f{c}}}h}","D":"F`","p":[[5,"VirtualPolynomial",0,151],[10,"PrimeField",152],[5,"DenseMultilinearExtension",0,153],[10,"Field",154],[1,"unit"],[1,"tuple"],[6,"ArithErrors",0,155],[6,"Result",156],[17,"Item"],[5,"Arc",157],[10,"IntoIterator",158],[6,"SerializationError",159],[10,"Iterator",160],[10,"Send",161],[1,"u64"],[1,"usize"],[1,"bool"],[5,"Vec",162],[1,"slice"],[5,"Radix2EvaluationDomain",163],[5,"DensePolynomial",164],[10,"Clone",165],[5,"VPAuxInfo",0,151],[10,"Default",166],[6,"Compress",167],[6,"Validate",167],[10,"Read",168],[10,"PartialEq",169],[6,"Option",170],[5,"Formatter",171],[8,"Result",171],[10,"Debug",171],[5,"Error",171],[10,"Hash",172],[10,"Hasher",172],[5,"Iter",173],[5,"IterMut",173],[10,"RngCore",174],[10,"Rng",175],[10,"Write",168],[5,"String",176],[5,"TypeId",177]],"r":[[0,155],[1,153],[5,151],[6,151],[16,178],[25,151],[26,151],[28,179],[55,151],[62,180],[63,180],[65,180],[66,180],[67,180],[82,178],[83,178],[84,178],[85,179],[87,180],[88,180],[102,180],[115,180],[116,180],[117,180],[118,180]],"b":[[8,"impl-Add-for-DenseMultilinearExtension%3CF%3E"],[9,"impl-Add%3C%26DenseMultilinearExtension%3CF%3E%3E-for-%26DenseMultilinearExtension%3CF%3E"],[10,"impl-AddAssign-for-DenseMultilinearExtension%3CF%3E"],[11,"impl-AddAssign%3C(F,+%26DenseMultilinearExtension%3CF%3E)%3E-for-DenseMultilinearExtension%3CF%3E"],[12,"impl-AddAssign%3C%26DenseMultilinearExtension%3CF%3E%3E-for-DenseMultilinearExtension%3CF%3E"],[70,"impl-Display-for-ArithErrors"],[71,"impl-Debug-for-ArithErrors"],[125,"impl-Sub-for-DenseMultilinearExtension%3CF%3E"],[126,"impl-Sub%3C%26DenseMultilinearExtension%3CF%3E%3E-for-%26DenseMultilinearExtension%3CF%3E"],[127,"impl-SubAssign-for-DenseMultilinearExtension%3CF%3E"],[128,"impl-SubAssign%3C%26DenseMultilinearExtension%3CF%3E%3E-for-DenseMultilinearExtension%3CF%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGcAFAAAAAAACAAFABAAAAASAAcAHAAAAB4AGQA5AAMAPgACAEIAAwBHAAUAVQAAAFcAAQBbAAMAYwAAAGkAAABtAAAAcgAAAHUAAAB3AAEAegAdAA=="}],\
["hyperplonk",{"t":"KRRRRQCMMMPFGEPPPPFPPFPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["HyperPlonkSNARK","Index","Proof","ProvingKey","VerifyingKey","build_mle","prelude","preprocess","prove","verify","ArithmeticErrors","CustomizedGates","HyperPlonkErrors","HyperPlonkSNARK","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MockCircuit","PCSErrors","PolyIOPErrors","SelectorColumn","SerializationError","TranscriptError","WitnessColumn","append","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coeff_ref","default","default","default","degree","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_selector_rows","from_witness_rows","get_nv","get_nv","index","init","init","init","init","init","into","into","into","into","into","is_satisfied","jellyfish_turbo_plonk_gate","mock_gate","new","num_selector_columns","num_selector_columns","num_variables","num_witness_columns","num_witness_columns","public_inputs","super_long_selector_gate","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vanilla_plonk_gate","vzip","vzip","vzip","vzip","vzip","witnesses"],"q":[[0,"hyperplonk"],[10,"hyperplonk::prelude"],[136,"hyperplonk::errors"],[137,"core::result"],[138,"hyperplonk::witness"],[139,"hyperplonk::selectors"],[140,"ark_ff::fields::prime"],[141,"hyperplonk::custom_gate"],[142,"core::clone"],[143,"core::default"],[144,"core::cmp"],[145,"core::fmt"],[146,"transcript::errors"],[147,"arithmetic::errors"],[148,"subroutines::poly_iop::errors"],[149,"ark_serialize::error"],[150,"subroutines::pcs::errors"],[151,"alloc::vec"],[152,"hyperplonk::mock"],[153,"alloc::string"],[154,"core::any"]],"i":[0,27,27,27,27,0,0,27,27,27,2,0,0,0,2,2,2,2,0,2,2,0,2,2,0,7,5,24,10,2,7,5,24,10,2,7,5,10,7,5,10,7,5,5,10,7,5,10,24,10,2,7,5,24,10,2,7,5,24,10,2,7,5,10,7,10,10,7,7,10,2,2,7,5,24,10,2,2,2,2,2,2,7,5,7,5,7,5,24,24,10,2,7,5,24,10,2,7,5,24,10,10,24,24,10,24,24,10,24,10,10,7,5,2,24,10,2,7,5,24,10,2,7,5,24,10,2,7,5,10,24,10,2,7,5,24],"f":"```````{c{{f{{b{eg}}d}}}{}{}{}}{{ch{h{j}}}{{f{ed}}}{}{}}{{che}{{f{ld}}}{}{}}```````````````{{{n{c}}c}A`Ab}{{{j{c}}c}A`Ab}{ce{}{}}000000000{AdAd}{{{n{c}}}{{n{c}}}{AfAb}}{{{j{c}}}{{j{c}}}{AfAb}}{{ce}A`{}{}}00{{{j{c}}}{{h{c}}}Ab}{{}Ad}{{}{{n{c}}}{AhAb}}{{}{{j{c}}}{AhAb}}{AdAj}{Ajc{}}000000000{AjA`}0000{{AdAd}l}{{{n{c}}{n{c}}}l{AlAb}}{{ce}l{}{}}000{{AdAn}B`}{{dAn}B`}0{{{n{c}}An}B`{BbAb}}{{{j{c}}An}B`{BbAb}}{cc{}}0{Bdd}{Bfd}{Bhd}{Bjd}{Bld}555{{{h{{`{c}}}}}{{f{{Bn{{n{c}}}}d}}}Ab}{{{h{{`{c}}}}}{{f{{Bn{{j{c}}}}d}}}Ab}{{{n{c}}}AjAb}{{{j{c}}}AjAb}`{{}Aj}0000{ce{}{}}0000{{{C`{c}}}lAb}{{}Ad}{{AjAj}Ad}{{AjAd}{{C`{c}}}Ab}{{{C`{c}}}AjAb}{AdAj}110`4666{cCb{}}{c{{f{e}}}{}{}}000000000{cCd{}}0000799999`","D":"El","p":[[1,"tuple"],[6,"HyperPlonkErrors",10,136],[6,"Result",137],[1,"slice"],[5,"WitnessColumn",10,138],[1,"bool"],[5,"SelectorColumn",10,139],[1,"unit"],[10,"PrimeField",140],[5,"CustomizedGates",10,141],[10,"Clone",142],[10,"Default",143],[1,"usize"],[10,"PartialEq",144],[5,"Formatter",145],[8,"Result",145],[10,"Debug",145],[6,"TranscriptError",146],[6,"ArithErrors",147],[6,"PolyIOPErrors",148],[6,"SerializationError",149],[6,"PCSError",150],[5,"Vec",151],[5,"MockCircuit",10,152],[5,"String",153],[5,"TypeId",154],[10,"HyperPlonkSNARK",0]],"r":[[11,141],[12,136],[13,0],[18,152],[21,139],[24,138]],"b":[[70,"impl-Display-for-HyperPlonkErrors"],[71,"impl-Debug-for-HyperPlonkErrors"],[76,"impl-From%3CTranscriptError%3E-for-HyperPlonkErrors"],[77,"impl-From%3CArithErrors%3E-for-HyperPlonkErrors"],[78,"impl-From%3CPolyIOPErrors%3E-for-HyperPlonkErrors"],[79,"impl-From%3CSerializationError%3E-for-HyperPlonkErrors"],[80,"impl-From%3CPCSError%3E-for-HyperPlonkErrors"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFoADAACAAMABwAAAA4AAAATAAAAHAATADEAGQBNAAQAWQAFAGQAAABtAAAAbwASAIMABQA="}],\
["subroutines",{"t":"CCQRRRRRKRRRRKRRNMMMMMNMCMMMPFFPPPPFFFFFGEPEPIFFFFFNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNPFPPPPPRPKRREGKRRPPKRRRPRRKRRNNNNNNNNNNNNNNNNMNNNNNNNNNNNMMMMNNOOMMMMQNNNNNNNNMMMMNN","n":["pcs","poly_iop","to_bytes","BatchProof","Commitment","Evaluation","Point","Polynomial","PolynomialCommitmentScheme","Proof","ProverParam","ProverParam","SRS","StructuredReferenceString","VerifierParam","VerifierParam","batch_verify","commit","extract_prover_param","extract_verifier_param","gen_srs_for_testing","gen_srs_for_testing","multi_open","open","prelude","trim","trim","verify","ArithErrors","BatchProof","Commitment","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearKzgPCS","MultilinearKzgProof","MultilinearProverParam","MultilinearUniversalParams","MultilinearVerifierParam","PCSError","PolynomialCommitmentScheme","SerializationError","StructuredReferenceString","TranscriptError","UnivariateKzgBatchProof","UnivariateKzgPCS","UnivariateKzgProof","UnivariateProverParam","UnivariateUniversalParams","UnivariateVerifierParam","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_check","batch_verify","beta_h","beta_h","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extract_prover_param","extract_prover_param","extract_verifier_param","extract_verifier_param","f_i_eval_at_point_i","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","gen_srs_for_testing","gen_srs_for_testing","gen_srs_for_testing","gen_srs_for_testing","h","h","h","h","h_mask","h_mask","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","max_degree","multi_open","num_vars","num_vars","open","open","powers_of_g","powers_of_g","powers_of_g","proof","proofs","prover_param","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","serialized_size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","trim","trim","trim","trim","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","PolyIOP","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","equivalent","equivalent","extract_sum","fmt","from","init","init_transcript","init_transcript","init_transcript","init_transcript","into","prelude","prove","prove","prove","prove","to_owned","try_from","try_into","type_id","verify","verify","verify","verify","vzip","ArithmeticErrors","IOPProof","InvalidChallenge","InvalidParameters","InvalidProof","InvalidProver","InvalidVerifier","MultilinearExtension","PCSErrors","PermutationCheck","PermutationCheckSubClaim","PermutationProof","PolyIOP","PolyIOPErrors","ProductCheck","ProductCheckProof","ProductCheckSubClaim","SerializationErrors","ShouldNotArrive","SumCheck","SumCheckProof","SumCheckSubClaim","Transcript","TranscriptErrors","VPAuxInfo","VirtualPolynomial","ZeroCheck","ZeroCheckProof","ZeroCheckSubClaim","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","equivalent","extract_sum","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init_transcript","init_transcript","init_transcript","init_transcript","into","into","point","proofs","prove","prove","prove","prove","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify","verify","verify","vzip","vzip"],"q":[[0,"subroutines"],[3,"subroutines::pcs"],[28,"subroutines::pcs::prelude"],[366,"subroutines::poly_iop"],[401,"subroutines::poly_iop::prelude"],[485,"transcript"],[486,"subroutines::pcs::errors"],[487,"core::result"],[488,"core::borrow"],[489,"rand::rng"],[490,"core::option"],[491,"ark_serialize::error"],[492,"ark_ec::pairing"],[493,"subroutines::pcs::multilinear_kzg::srs"],[494,"core::iter::traits::iterator"],[495,"core::marker"],[496,"subroutines::pcs::multilinear_kzg"],[497,"subroutines::pcs::structs"],[498,"subroutines::pcs::univariate_kzg::srs"],[499,"ark_ec"],[500,"subroutines::pcs::univariate_kzg"],[501,"subroutines::pcs::multilinear_kzg::batching"],[502,"core::clone"],[503,"core::default"],[504,"ark_serialize"],[505,"std::io"],[506,"core::cmp"],[507,"core::fmt"],[508,"arithmetic::errors"],[509,"transcript::errors"],[510,"core::hash"],[511,"alloc::string"],[512,"core::any"],[513,"ark_ff::fields::prime"],[514,"subroutines::poly_iop::errors"],[515,"arithmetic::virtual_polynomial"],[516,"subroutines::poly_iop::structs"],[517,"subroutines::poly_iop::perm_check"],[518,"subroutines::poly_iop::prod_check"],[519,"subroutines::poly_iop::sum_check"],[520,"subroutines::poly_iop::zero_check"]],"i":[0,0,0,32,32,32,32,32,0,32,32,9,32,0,32,9,32,32,9,9,32,9,32,32,0,32,9,32,4,0,0,4,4,4,4,0,0,0,0,0,0,0,4,0,4,0,0,0,0,0,0,18,21,22,23,24,25,27,28,29,44,25,28,44,53,4,30,18,21,22,23,24,25,27,28,29,44,53,4,30,18,21,22,23,24,25,27,28,29,18,21,22,23,24,25,27,28,29,30,18,21,22,23,24,25,27,28,29,30,18,21,22,23,24,25,27,28,29,44,53,30,24,25,27,28,44,53,4,30,18,21,22,23,24,25,27,28,29,44,53,4,30,18,21,22,23,24,25,27,28,29,18,21,22,23,24,25,27,28,29,44,53,4,30,18,21,22,23,24,25,27,28,29,30,23,24,25,27,28,29,30,30,23,23,24,24,25,25,27,27,28,28,29,29,18,25,18,25,30,4,4,30,18,21,22,23,24,25,27,28,29,44,53,4,4,4,4,30,18,21,22,23,24,25,27,28,29,21,22,28,44,53,18,25,21,22,25,28,18,22,24,44,53,4,30,18,21,22,23,24,25,27,28,29,44,53,4,30,18,21,22,23,24,25,27,28,29,25,44,21,22,44,53,21,25,27,29,23,18,18,21,22,23,24,25,27,28,29,18,21,22,23,24,25,27,28,29,30,18,21,22,23,24,25,27,28,29,4,44,53,18,25,44,53,4,30,18,21,22,23,24,25,27,28,29,44,53,4,30,18,21,22,23,24,25,27,28,29,44,53,4,30,18,21,22,23,24,25,27,28,29,44,53,44,53,4,30,18,21,22,23,24,25,27,28,29,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,50,0,50,50,50,50,50,54,50,0,55,55,0,0,0,56,56,50,50,0,54,54,54,50,54,54,0,57,57,50,52,50,52,52,52,52,50,52,50,52,50,52,52,52,52,54,50,50,52,50,50,50,50,50,52,50,52,55,56,54,57,50,52,52,52,55,56,54,57,0,52,50,50,52,50,52,50,52,55,56,54,57,50,52],"f":"````````````````{{c{b{e}}{b{g}}id}{{j{fh}}}{}{}{}{}}{{eg}{{j{ih}}}{}{{l{c}}}{}{}}{{{Ab{}{{n{c}}{A`{e}}}}Ad}c{}{}}{{{Ab{}{{n{c}}{A`{e}}}}Ad}e{}{}}{{cAd}{{j{eh}}}Af{}}{{cAd}{{j{{Ab{}{{n{e}}{A`{g}}}}h}}}Af{}{}}{{e{b{g}}{b{i}}{b{k}}d}{{j{mh}}}{}{{l{c}}}{}{}{}{}}{{egi}{{j{{Ah{km}}h}}}{}{{l{c}}}{}{}{}{}}`{{e{Aj{Ad}}{Aj{Ad}}}{{j{{Ah{gi}}h}}}{}{{l{c}}}{}{}}{{{Ab{}{{n{c}}{A`{e}}}}Ad}{{j{{Ah{ce}}h}}}{}{}}{{cegi}{{j{fh}}}{}{}{}{}}```````````````````````{e{{j{AlAn}}}B`{{Bf{}{{Bb{{Bd{c}}}}}}Bh}}{e{{j{AlAn}}}B`{{Bf{}{{Bb{{Bj{c}}}}}}Bh}}{e{{j{AlAn}}}B`{{Bf{}{{Bb{{Bl{c}}}}}}Bh}}{e{{j{AlAn}}}B`{{Bf{}{{Bb{{Bn{c}}}}}}Bh}}{e{{j{AlAn}}}B`{{Bf{}{{Bb{{C`{c}}}}}}Bh}}{e{{j{AlAn}}}B`{{Bf{}{{Bb{{Cb{c}}}}}}Bh}}{e{{j{AlAn}}}Cd{{Bf{}{{Bb{{Cf{c}}}}}}Bh}}{e{{j{AlAn}}}B`{{Bf{}{{Bb{{Ch{c}}}}}}Bh}}{e{{j{AlAn}}}B`{{Bf{}{{Bb{{Cj{c}}}}}}Bh}}{{c{b{e}}{b{g}}id}{{j{fh}}}{}{}{}{}}``{ce{}{}}0000000000000000000000000{{{Bd{c}}}{{j{AlAn}}}B`}{{{Bj{c}}}{{j{AlAn}}}B`}{{{Bl{c}}}{{j{AlAn}}}B`}{{{Bn{c}}}{{j{AlAn}}}B`}{{{C`{c}}}{{j{AlAn}}}B`}{{{Cb{c}}}{{j{AlAn}}}B`}{{{Cf{c}}}{{j{AlAn}}}Cd}{{{Ch{c}}}{{j{AlAn}}}B`}{{{Cj{c}}}{{j{AlAn}}}B`}{{{Cl{ce}}}{{Cl{ce}}}{B`Cn}{{D`{c}}Cn}}{{{Bd{c}}}{{Bd{c}}}{CnB`}}{{{Bj{c}}}{{Bj{c}}}{CnB`}}{{{Bl{c}}}{{Bl{c}}}{CnB`}}{{{Bn{c}}}{{Bn{c}}}{CnB`}}{{{C`{c}}}{{C`{c}}}B`}{{{Cb{c}}}{{Cb{c}}}{CnB`}}{{{Cf{c}}}{{Cf{c}}}{CnCd}}{{{Ch{c}}}{{Ch{c}}}B`}{{{Cj{c}}}{{Cj{c}}}{CnB`}}{{ce}Al{}{}}000000000{{eg}{{j{ih}}}{}{{l{c}}}{}{}}0{{}{{Cl{ce}}}{B`Db}{{D`{c}}Db}}{{}{{C`{c}}}B`}{{}{{Cb{c}}}{DbB`}}{{}{{Cf{c}}}{DbCd}}{{}{{Ch{c}}}B`}{Adc{}}0000000000000000000000000{{cDdDf}{{j{{Bd{e}}An}}}DhB`}{{cDdDf}{{j{{Bj{e}}An}}}DhB`}{{cDdDf}{{j{{Bl{e}}An}}}DhB`}{{cDdDf}{{j{{Bn{e}}An}}}DhB`}{{cDdDf}{{j{{C`{e}}An}}}DhB`}{{cDdDf}{{j{{Cb{e}}An}}}DhB`}{{cDdDf}{{j{{Cf{e}}An}}}DhCd}{{cDdDf}{{j{{Ch{e}}An}}}DhB`}{{cDdDf}{{j{{Cj{e}}An}}}DhB`}{AdAl}000000000000{{{Cl{ce}}{Cl{ce}}}f{B`Dj}{{D`{c}}Dj}}{{{Bn{c}}{Bn{c}}}f{DjB`}}{{{C`{c}}{C`{c}}}fB`}{{{Cb{c}}{Cb{c}}}f{DjB`}}{{{Cf{c}}{Cf{c}}}f{DjCd}}{{{Ch{c}}{Ch{c}}}fB`}{{{Cj{c}}{Cj{c}}}f{DjB`}}{{ce}f{}{}}0000000000000{{{Bd{c}}Ad}eB`{}}{{{Cb{c}}Ad}eB`{}}10`{{hDl}Dn}0{{{Cl{ce}}Dl}Dn{B`E`}{{D`{c}}E`}}{{{Bd{c}}Dl}Dn{E`B`}}{{{Bj{c}}Dl}Dn{E`B`}}{{{Bl{c}}Dl}Dn{E`B`}}{{{Bn{c}}Dl}Dn{E`B`}}{{{C`{c}}Dl}DnB`}{{{Cb{c}}Dl}Dn{E`B`}}{{{Cf{c}}Dl}Dn{E`Cd}}{{{Ch{c}}Dl}DnB`}{{{Cj{c}}Dl}Dn{E`B`}}{cc{}}0{Ebh}1{Edh}{Anh}3333333333```{{cAd}{{j{eh}}}Af{}}0{{cAd}{{j{{Bd{e}}h}}}AfB`}{{cAd}{{j{{Cb{e}}h}}}AfB`}``````{{{C`{c}}e}AlB`Ef}{{}Ad}000000000000{ce{}{}}000000000000{{{Cb{c}}}AdB`}{{e{b{g}}{b{i}}{b{k}}d}{{j{{Cl{m{Eh{m}}}}h}}}{}{{l{c}}}{}{}{}B`}``{{egi}{{j{{Ah{km}}h}}}{}{{l{c}}}{}{}{}{}}0``````{{{Bd{c}}eDd}{{j{AlAn}}}B`Ej}{{{Bj{c}}eDd}{{j{AlAn}}}B`Ej}{{{Bl{c}}eDd}{{j{AlAn}}}B`Ej}{{{Bn{c}}eDd}{{j{AlAn}}}B`Ej}{{{C`{c}}eDd}{{j{AlAn}}}B`Ej}{{{Cb{c}}eDd}{{j{AlAn}}}B`Ej}{{{Cf{c}}eDd}{{j{AlAn}}}CdEj}{{{Ch{c}}eDd}{{j{AlAn}}}B`Ej}{{{Cj{c}}eDd}{{j{AlAn}}}B`Ej}{{{Bd{c}}Dd}AdB`}{{{Bj{c}}Dd}AdB`}{{{Bl{c}}Dd}AdB`}{{{Bn{c}}Dd}AdB`}{{{C`{c}}Dd}AdB`}{{{Cb{c}}Dd}AdB`}{{{Cf{c}}Dd}AdCd}{{{Ch{c}}Dd}AdB`}{{{Cj{c}}Dd}AdB`}{ce{}{}}000000000{cEl{}}{{e{Aj{Ad}}{Aj{Ad}}}{{j{{Ah{gi}}h}}}{}{{l{c}}}{}{}}0{{{Bd{c}}Ad}{{j{{Ah{eg}}h}}}B`{}{}}{{{Cb{c}}Ad}{{j{{Ah{eg}}h}}}B`{}{}}{c{{j{e}}}{}{}}0000000000000000000000000{cEn{}}000000000000{{cegi}{{j{fh}}}{}{}{}{}}07777777777777`77{{{F`{c}}}{{F`{c}}}{CnFb}}{{ce}Al{}{}}{{}{{F`{c}}}{DbFb}}{Adc{}}0{AdAl}{{{F`{c}}{F`{c}}}f{DjFb}}{{ce}f{}{}}0{ce{}Fb}{{{F`{c}}Dl}Dn{E`Fb}}{cc{}}{{}Ad}{{}c{}}000{ce{}{}}`{{{b{c}}{b{c}}{b{c}}d}{{j{{Ah{ecc}}Fd}}}{}{}}{{ce}{{j{gFd}}}{}{}{}}{{{b{c}}{b{c}}d}{{j{{Ah{ecc}}Fd}}}{}{}}13{c{{j{e}}}{}{}}0{cEn{}}{{ceg}{{j{iFd}}}{}{}{}{}}0{{cFfe}{{j{gFd}}}{}{}{}}{{cegi}{{j{kFd}}}Fb{}{}{}{}}8`````````````````````````````8888{{{Fh{c}}}{{Fh{c}}}{CnFb}}{{ce}Al{}{}}{{}{{Fh{c}}}{DbFb}}{Adc{}}000{AdAl}0{{{Fh{c}}{Fh{c}}}f{DjFb}}{{ce}f{}{}}0{ce{}Fb}{{FdDl}Dn}0{{{Fh{c}}Dl}Dn{E`Fb}}{EdFd}{hFd}{AnFd}{EbFd}{cc{}}0{{}Ad}0{{}c{}}000{ce{}{}}0``{{{b{c}}{b{c}}{b{c}}d}{{j{{Ah{ecc}}Fd}}}{}{}}{{{b{c}}{b{c}}d}{{j{{Ah{ecc}}Fd}}}{}{}}{{ce}{{j{gFd}}}{}{}{}}0`3{cEl{}}{c{{j{e}}}{}{}}000{cEn{}}0{{ceg}{{j{iFd}}}{}{}{}{}}{{cFfe}{{j{gFd}}}{}{}{}}{{cegi}{{j{kFd}}}Fb{}{}{}{}}299","D":"ABl","p":[[1,"slice"],[5,"IOPTranscript",485],[1,"bool"],[6,"PCSError",28,486],[6,"Result",487],[10,"Borrow",488],[17,"ProverParam"],[17,"VerifierParam"],[10,"StructuredReferenceString",3],[1,"usize"],[10,"Rng",489],[1,"tuple"],[6,"Option",490],[1,"unit"],[6,"SerializationError",491],[10,"Pairing",492],[17,"Item"],[5,"MultilinearUniversalParams",28,493],[10,"Iterator",494],[10,"Send",495],[5,"MultilinearProverParam",28,493],[5,"MultilinearVerifierParam",28,493],[5,"MultilinearKzgProof",28,496],[5,"Commitment",28,497],[5,"UnivariateUniversalParams",28,498],[10,"AffineRepr",499],[5,"UnivariateProverParam",28,498],[5,"UnivariateVerifierParam",28,498],[5,"UnivariateKzgProof",28,500],[5,"BatchProof",28,501],[10,"Clone",502],[10,"PolynomialCommitmentScheme",3],[10,"Default",503],[6,"Compress",504],[6,"Validate",504],[10,"Read",505],[10,"PartialEq",506],[5,"Formatter",507],[8,"Result",507],[10,"Debug",507],[6,"ArithErrors",508],[6,"TranscriptError",509],[10,"Hasher",510],[5,"MultilinearKzgPCS",28,496],[10,"Write",505],[5,"String",511],[5,"TypeId",512],[5,"PolyIOP",366],[10,"PrimeField",513],[6,"PolyIOPErrors",401,514],[5,"VPAuxInfo",515],[5,"IOPProof",401,516],[5,"UnivariateKzgPCS",28],[10,"SumCheck",401],[10,"PermutationCheck",401],[10,"ProductCheck",401],[10,"ZeroCheck",401]],"r":[[29,501],[30,497],[35,496],[36,496],[37,493],[38,493],[39,493],[40,486],[41,3],[43,3],[45,500],[46,500],[47,500],[48,498],[49,498],[50,498],[402,516],[410,517],[413,366],[414,514],[415,518],[420,519],[427,520],[470,0]],"b":[[199,"impl-Display-for-PCSError"],[200,"impl-Debug-for-PCSError"],[213,"impl-From%3CArithErrors%3E-for-PCSError"],[215,"impl-From%3CTranscriptError%3E-for-PCSError"],[216,"impl-From%3CSerializationError%3E-for-PCSError"],[382,"impl-SumCheck%3CF%3E-for-PolyIOP%3CF%3E"],[383,"impl-PermutationCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[384,"impl-ProductCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[385,"impl-ZeroCheck%3CF%3E-for-PolyIOP%3CF%3E"],[388,"impl-PermutationCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[389,"impl-SumCheck%3CF%3E-for-PolyIOP%3CF%3E"],[390,"impl-ProductCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[391,"impl-ZeroCheck%3CF%3E-for-PolyIOP%3CF%3E"],[396,"impl-ZeroCheck%3CF%3E-for-PolyIOP%3CF%3E"],[397,"impl-PermutationCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[398,"impl-ProductCheck%3CE,+PCS%3E-for-PolyIOP%3C%3CE+as+Pairing%3E::ScalarField%3E"],[399,"impl-SumCheck%3CF%3E-for-PolyIOP%3CF%3E"],[447,"impl-Display-for-PolyIOPErrors"],[448,"impl-Debug-for-PolyIOPErrors"],[450,"impl-From%3CTranscriptError%3E-for-PolyIOPErrors"],[451,"impl-From%3CPCSError%3E-for-PolyIOPErrors"],[452,"impl-From%3CSerializationError%3E-for-PolyIOPErrors"],[453,"impl-From%3CArithErrors%3E-for-PolyIOPErrors"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAE8BHAAAAAIAHgAAACoAAAAsAAAANAAIAEAANgB5AEkAyAALANYAAADYAAEA8QANABgBHAA5ASYAYgEMAHABDAB+AQQAhAENAJkBAACcAQIAoQEBAKYBAgCqAQEArQERAMABBgDJAQEA0QEBANgBBwDkAQEA"}],\
["transcript",{"t":"FPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNN","n":["IOPTranscript","InvalidTranscript","SerializationError","TranscriptError","append_field_element","append_message","append_serializable_element","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","get_and_append_challenge","get_and_append_challenge_vectors","init","init","into","into","new","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"transcript"],[42,"transcript::errors"],[43,"core::result"],[44,"ark_ff::fields::prime"],[45,"ark_serialize"],[46,"core::clone"],[47,"core::fmt"],[48,"ark_serialize::error"],[49,"alloc::vec"],[50,"alloc::string"],[51,"core::any"]],"i":[0,5,5,0,1,1,1,5,1,5,1,1,1,5,1,5,1,5,1,5,5,5,5,1,1,1,5,1,5,1,1,0,1,5,5,1,5,1,5,1,5,1],"f":"````{{{b{c}}{f{d}}c}{{l{hj}}}n}{{{b{c}}{f{d}}{f{d}}}{{l{hj}}}n}{{{b{c}}{f{d}}e}{{l{hj}}}nA`}{ce{}{}}000{{{b{c}}}{{b{c}}}{Abn}}{{ce}h{}{}}{Adc{}}000{Adh}0{{jAf}Ah}0{cc{}}{Ajj}1{{{b{c}}{f{d}}}{{l{cj}}}n}{{{b{c}}{f{d}}Ad}{{l{{Al{c}}j}}}n}{{}Ad}0::{{{f{d}}}{{b{c}}}n}`;{cAn{}}{c{{l{e}}}{}{}}000{cB`{}}0>>","D":"Af","p":[[5,"IOPTranscript",0],[1,"u8"],[1,"slice"],[1,"unit"],[6,"TranscriptError",0,42],[6,"Result",43],[10,"PrimeField",44],[10,"CanonicalSerialize",45],[10,"Clone",46],[1,"usize"],[5,"Formatter",47],[8,"Result",47],[6,"SerializationError",48],[5,"Vec",49],[5,"String",50],[5,"TypeId",51]],"r":[[3,42]],"b":[[19,"impl-Debug-for-TranscriptError"],[20,"impl-Display-for-TranscriptError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ABAAFABAAFwAAABkAAwAhAAkA"}],\
["util",{"t":"H","n":["parallelizable_slice_iter"],"q":[[0,"util"],[1,"rayon::slice"],[2,"core::marker"]],"i":[0],"f":"{{{b{c}}}{{d{c}}}f}","D":"d","p":[[1,"slice"],[5,"Iter",1],[10,"Sync",2]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
