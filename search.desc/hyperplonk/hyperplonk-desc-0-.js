searchState.loadedDescShard("hyperplonk", 0, "Main module for the HyperPlonk SNARK.\nA trait for HyperPlonk SNARKs. A HyperPlonk is derived …\nBuild MLE from matrix of witnesses.\nGenerate the preprocessed polynomials output by the …\nGenerate HyperPlonk SNARK proof.\nVerify the HyperPlonk proof.\nArithmetic Error: {0}\nCustomized gate is a list of tuples of (coefficient, …\nA <code>enum</code> specifying the possible failure modes of hyperplonk.\nInvalid parameters: {0}\nInvalid Proof: {0}\nInvalid Prover: {0}\nInvalid Verifier: {0}\nPCS error {0}\nPolyIOP error {0}\nA column of selectors of length <code>#constraints</code>\nAn error during (de)serialization: {0}\nTranscript error {0}\nA column of witnesses of length <code>#constraints</code>\nAppend a new element to the selector column\nAppend a new element to the witness column\nThe degree of the algebraic customized gate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild selector columns from rows\nBuild witness columns from rows\nthe number of variables of the multilinear polynomial that …\nthe number of variables of the multilinear polynomial that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a jellyfish turbo plonk gate:\nGenerate a random gate for <code>num_witness</code> with a highest …\nGenerate a mock plonk circuit for the input constraint …\nnumber of selector columns\nThe number of selectors in a customized gate\nNumber of variables in a multilinear system\nnumber of witness columns\nThe number of witnesses in a customized gate\nReturn a plonk gate where #selector &gt; #witness * 2\nReturn a vanilla plonk gate:")