(function() {var implementors = {};
implementors["pcs"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"pcs/enum.PCSErrors.html\" title=\"enum pcs::PCSErrors\">PCSErrors</a>","synthetic":true,"types":["pcs::errors::PCSErrors"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/struct.UniversalParams.html\" title=\"struct pcs::UniversalParams\">UniversalParams</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::param::UniversalParams"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/struct.ProverParam.html\" title=\"struct pcs::ProverParam\">ProverParam</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::param::ProverParam"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/struct.VerifierParam.html\" title=\"struct pcs::VerifierParam\">VerifierParam</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::param::VerifierParam"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/struct.KZGMultilinearPC.html\" title=\"struct pcs::KZGMultilinearPC\">KZGMultilinearPC</a>&lt;E&gt;","synthetic":true,"types":["pcs::KZGMultilinearPC"]}];
implementors["poly_iop"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"poly_iop/enum.PolyIOPErrors.html\" title=\"enum poly_iop::PolyIOPErrors\">PolyIOPErrors</a>","synthetic":true,"types":["poly_iop::errors::PolyIOPErrors"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"poly_iop/struct.IOPTranscript.html\" title=\"struct poly_iop::IOPTranscript\">IOPTranscript</a>&lt;F&gt;","synthetic":true,"types":["poly_iop::transcript::IOPTranscript"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"poly_iop/struct.VirtualPolynomial.html\" title=\"struct poly_iop::VirtualPolynomial\">VirtualPolynomial</a>&lt;F&gt;","synthetic":true,"types":["poly_iop::virtual_poly::VirtualPolynomial"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"poly_iop/struct.VPAuxInfo.html\" title=\"struct poly_iop::VPAuxInfo\">VPAuxInfo</a>&lt;F&gt;","synthetic":true,"types":["poly_iop::virtual_poly::VPAuxInfo"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"poly_iop/struct.PolyIOP.html\" title=\"struct poly_iop::PolyIOP\">PolyIOP</a>&lt;F&gt;","synthetic":true,"types":["poly_iop::PolyIOP"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()