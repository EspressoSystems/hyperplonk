(function() {var implementors = {};
implementors["pcs"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"pcs/prelude/enum.PCSErrors.html\" title=\"enum pcs::prelude::PCSErrors\">PCSErrors</a>","synthetic":true,"types":["pcs::errors::PCSErrors"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.MultilinearUniversalParams.html\" title=\"struct pcs::prelude::MultilinearUniversalParams\">MultilinearUniversalParams</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::multilinear_kzg::srs::MultilinearUniversalParams"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.MultilinearProverParam.html\" title=\"struct pcs::prelude::MultilinearProverParam\">MultilinearProverParam</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::multilinear_kzg::srs::MultilinearProverParam"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.MultilinearVerifierParam.html\" title=\"struct pcs::prelude::MultilinearVerifierParam\">MultilinearVerifierParam</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::multilinear_kzg::srs::MultilinearVerifierParam"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.KZGMultilinearPCS.html\" title=\"struct pcs::prelude::KZGMultilinearPCS\">KZGMultilinearPCS</a>&lt;E&gt;","synthetic":true,"types":["pcs::multilinear_kzg::KZGMultilinearPCS"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.Proof.html\" title=\"struct pcs::prelude::Proof\">Proof</a>&lt;E&gt;","synthetic":true,"types":["pcs::multilinear_kzg::Proof"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.BatchProof.html\" title=\"struct pcs::prelude::BatchProof\">BatchProof</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::multilinear_kzg::BatchProof"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.Commitment.html\" title=\"struct pcs::prelude::Commitment\">Commitment</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::structs::Commitment"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.UnivariateUniversalParams.html\" title=\"struct pcs::prelude::UnivariateUniversalParams\">UnivariateUniversalParams</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::univariate_kzg::srs::UnivariateUniversalParams"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.UnivariateProverParam.html\" title=\"struct pcs::prelude::UnivariateProverParam\">UnivariateProverParam</a>&lt;C&gt;","synthetic":true,"types":["pcs::univariate_kzg::srs::UnivariateProverParam"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"pcs/prelude/struct.UnivariateVerifierParam.html\" title=\"struct pcs::prelude::UnivariateVerifierParam\">UnivariateVerifierParam</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G1Affine: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as PairingEngine&gt;::G2Affine: Freeze,&nbsp;</span>","synthetic":true,"types":["pcs::univariate_kzg::srs::UnivariateVerifierParam"]}];
implementors["poly_iop"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"poly_iop/enum.PolyIOPErrors.html\" title=\"enum poly_iop::PolyIOPErrors\">PolyIOPErrors</a>","synthetic":true,"types":["poly_iop::errors::PolyIOPErrors"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"poly_iop/struct.VirtualPolynomial.html\" title=\"struct poly_iop::VirtualPolynomial\">VirtualPolynomial</a>&lt;F&gt;","synthetic":true,"types":["poly_iop::virtual_poly::VirtualPolynomial"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"poly_iop/struct.VPAuxInfo.html\" title=\"struct poly_iop::VPAuxInfo\">VPAuxInfo</a>&lt;F&gt;","synthetic":true,"types":["poly_iop::virtual_poly::VPAuxInfo"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"poly_iop/struct.PolyIOP.html\" title=\"struct poly_iop::PolyIOP\">PolyIOP</a>&lt;F&gt;","synthetic":true,"types":["poly_iop::PolyIOP"]}];
implementors["transcript"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"transcript/enum.TranscriptErrors.html\" title=\"enum transcript::TranscriptErrors\">TranscriptErrors</a>","synthetic":true,"types":["transcript::errors::TranscriptErrors"]},{"text":"impl&lt;F&gt; Freeze for <a class=\"struct\" href=\"transcript/struct.IOPTranscript.html\" title=\"struct transcript::IOPTranscript\">IOPTranscript</a>&lt;F&gt;","synthetic":true,"types":["transcript::IOPTranscript"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()